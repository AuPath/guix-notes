#+TITLE: System configuration with GNU Guix

* Table of Contents                                                       :TOC:
 - [[#introduction][Introduction]]
 - [[#gnu-guix-system-configuration][GNU Guix system configuration]]
 - [[#the-sudo-package][The sudo package]]
 - [[#how-does-guix-configure-sudo][How does Guix configure sudo?]]
 - [[#deterministic-system-maintenance][Deterministic system maintenance]]

* Introduction

GNU Guix is more than a package manager. Its definition system is so
powerful that it can be used for full system configuration in a
functional way, i.e., with versions, roll-back and non-interference
between configurations. These are attractive properties not matched by
non-deterministic systems, such as Chef and Puppet (in computer
science, a nondeterministic algorithm is an algorithm that, even for
the same input, can exhibit different behaviors on different runs, as
opposed to a deterministic algorithm).

In this document we explore sudo configuration as it can be handled 
by Guix. sudo is of particular interest since it requires setuid and
is prissy about its configuration file /etc/sudoers.

* GNU Guix system configuration

According to the GNU Guix [[https://www.gnu.org/software/guix/manual/html_node/System-Configuration.html#System-Configuration][System-Configuration]] manual, the Guix System
Distribution supports a consistent whole-system configuration
mechanism. By that we mean that all aspects of the global system
configuration—such as the available system services, timezone and
locale settings, user accounts—are declared in a single place. Such a
system configuration can be instantiated—i.e., effected.

One of the advantages of putting all the system configuration under
the control of Guix is that it supports transactional system upgrades,
and makes it possible to roll-back to a previous system instantiation,
should something go wrong with the new one. Another one is that it
makes it easy to replicate the exact same configuration across
different machines, or at different points in time, without having to
resort to additional administration tools layered on top of the
system’s own tools.

So, for example, user accounts and groups are entirely managed through
the operating-system declaration. They are specified with the
user-account and user-group forms:

#+begin_src scheme
(user-account
  (name "alice")
  (group "users")
  (supplementary-groups '("wheel"   ;allow use of sudo, etc.
                          "audio"   ;sound card
                          "video"   ;video devices such as webcams
                          "cdrom")) ;the good ol' CD-ROM
  (comment "Bob's sister")
  (home-directory "/home/alice"))
#+end_src scheme

When booting or upon completion of guix system reconfigure, the system
ensures that only the user accounts and groups specified in the
operating-system declaration exist, and with the specified
properties. Thus, account or group creations or modifications made by
directly invoking commands such as useradd are lost upon
reconfiguration or reboot. This ensures that the system remains
exactly as declared.

How does it work?

* The sudo package

The sudo package can be installed with

: guix package -i sudo

This installs the sudo binary in /gnu/store and symlinks sudo and sudoers from
~/.guix-profile/bin. Now trying to run either sudo or sudoedit results in

: sudo: ~/.guix-profile/bin/sudo must be owned by uid 0 and have the setuid bit set

also, if you check out the tree in /gnu/store there is no
configuration file, though it includes documentation and examples.

It all looks terrifically bare bones. The sudo package can be found in
the file [[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/admin.scm][gnu/packages/admin.scm]]. There you can see sudo actually is
configured to use system paths for logging, but avoids creating the
paths and does not create the /etc/sudoers file:

#+begin_src scheme
    (arguments
     `(#:configure-flags
       (list "--with-logpath=/var/log/sudo.log"
             "--with-rundir=/run/sudo"
             "--with-vardir=/var/db/sudo"
       #:phases (alist-cons-before
                 'configure 'pre-configure
                 (lambda _
                   (substitute* (find-files "." "Makefile\\.in")
                     (("-o [[:graph:]]+ -g [[:graph:]]+")
                      ;; Allow installation as non-root.
                      "")
                     (("^install: (.*)install-sudoers(.*)" _ before after)
                      ;; Don't try to create /etc/sudoers.
                      (string-append "install: " before after "\n"))
                     (("\\$\\(DESTDIR\\)\\$\\(rundir\\)")
                      ;; Don't try to create /run/sudo.
                      "$(TMPDIR)/dummy")
                     (("\\$\\(DESTDIR\\)\\$\\(vardir\\)")
                      ;; Don't try to create /var/db/sudo.
                      "$(TMPDIR)/dummy")))
                 %standard-phases)
#+end_src scheme

No need to understand the commands exactly, but you get the gist.

* How does Guix configure sudo?

A Guix build already configures sudo as can be seen [[https://www.gnu.org/software/guix/manual/html_node/Using-the-Configuration-System.html#Using-the-Configuration-System][here]]. The example
code looks like

#+begin_src scheme
  ;; This is where user accounts are specified.  The "root"
  ;; account is implicit, and is initially created with the
  ;; empty password.
  (users (cons (user-account
                (name "alice")
                (comment "Bob's sister")
                (group "users")

                ;; Adding the account to the "wheel" group
                ;; makes it a sudoer.  Adding it to "audio"
                ;; and "video" allows the user to play sound
                ;; and access the webcam.
                (supplementary-groups '("wheel"
                                        "audio" "video"))
                (home-directory "/home/alice"))
               %base-user-accounts))
#+end_src scheme

So, Guix knows how to set up sudo! The template is available in
[[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/system/examples/bare-bones.tmpl][gnu/system/examples/bare-bones.tmpl]] and can be used to set up a VM,
for example. The system install is managed by [[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/system/install.scm][gnu/system/install.scm]]. The 
workhorse, however, is [[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/system.scm][gnu/system.scm]].

In the last you can find that sudo is a required package, /etc/sudoers
gets written and that setuid is set for the sudo command.

#+begin_src scheme
(sudoers-file operating-system-sudoers-file     ; file-like
                (default %sudoers-specification)))

(define %setuid-programs
  ;; Default set of setuid-root programs.
  (let ((shadow (@ (gnu packages admin) shadow)))
    (list #~(string-append #$shadow "/bin/passwd")
          #~(string-append #$shadow "/bin/su")
          #~(string-append #$sudo "/bin/sudo")
          #~(string-append #$fuse "/bin/fusermount"))))

(define %sudoers-specification
  (plain-file "sudoers" "\
root ALL=(ALL) ALL
%wheel ALL=(ALL) ALL\n"))
#+end_src scheme

The role of setuid-programs is explained in the [[https://www.gnu.org/software/guix/manual/html_node/Setuid-Programs.html][Guix documentation]]
where it states that the binaries are actually installed in
/run/setuid-programs. It would be a security hazard to use setuid
inside the /gnu/store.

In short the configuration of sudo is not part of the sudo package. It
is 'lifted' to the level of system configuration at build time, which
makes sense when you want determinism.

Another intriguing file is [[http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/build/activation.scm][gnu/build/activation.scm]] which contains

#+begin_src scheme
;; Things such as /etc/sudoers must be regular files, not
;; symlinks; furthermore, they could be modified behind our
;; back---e.g., with 'visudo'.  Thus, make a copy instead of
;; symlinking them.
(if (file-is-directory? source)
    (symlink source target)
    (copy-file source target))
(when (string=? (basename target) "sudoers")
  (chmod target #o440))))
#+end_src scheme

where you can see sudo getting special treatment at build-time
activation. First the file /etc/static/sudoers is created, next copied
to /etc and finally permissions are set.

This happens every time you build a system. Note that on a running
system when the sudo package gets updated nothing will happen to the
configuration. I.e. you need to regenerate the full system to make use
of an updated package which, essentially, is the right thing to do
with determinism.

* Deterministic system maintenance

Cfengine, Chef and Puppet are non-deterministic system maintenance
tools. There is no guarantee the resulting target system is
consistent. These tools were invented out of the necessity of
automating system administration, simply by overwriting packages and
configuration files. The time and order of running these tools may
result in different outcomes. With the next evolutionary step, with
light-weight containers in conjunction with GNU Guix, system
administration can avoid non-determinism. Light-weight containers
(such as Docker) are not enough.

GNU Guix can also be configured to check its settings on reboot or when
running 

: guix system reconfigure

From the sudo example above it should also be noted that systems can
be updated in the traditional way, but that you need to update
/run/suid-programs after a sudo update to make use of the updated
sudo. You can still work the old way if you want to.
