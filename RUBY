-*- mode: org; coding: utf-8; -*-

#+TITLE: Ruby on GNU Guix

* Introduction

The GNU software packaging project is packaging done right. Ruby
deployment with rubygems used to be pretty good, years ago, but over
time it has turned into a nightmare of dependencies. Tools like RVM
and rbenv try to bring some level of control for running multiple
versions of Ruby, but over the last years they are showing their
limitations clearly. Every time I need to work with RVM I start
throwing things at my computer. So when should you look at GNU Guix?
Wen you 

1. are serious about software deployment
2. need to handle mutiple versions of Ruby
3. want clear isolation of dependencies
4. want clean separation of gems
5. want a reproducable environment

GNU Guix allows you to define a software package once with all its
dependencies. Every time you install the package it gets reproduced
*exactly* with its exact dependency graph, all the way down to
glibc. Whether you are a sysadmin who needs to deploy an exact Rails
stack or you are a developer and need to support user environment, GNU
Guix is the solution you require. Use cases are

1. test gems using multiple versions of Ruby 
2. install concurrent rubies with or without linked openssl support
3. run minimal ruby to be exposed to the web
4. update ruby in production and roll-back after a problem
5. run multiple versions of the same gem against one ruby
6. run multiple versions of openssl dependencies

Use your imagination. The point is that you control the *full* dependency
graph. Always. You can even give users rights to install and share software because
the underlying system is 'immutable'. Existing graphs can not be overwritten
by others.

GNU Guix is a next generation software package installer with a range
of features, including sane dependency handling, transactional and
reproducable installs which can be rolled back. In short, GNU Guix has
resolved the fundamental problems of software deployment and
management. Don't take my word for it, just try it. GNU Guix also
plays well with Docker and VMs. 

At this point GNU Guix is getting mature with almost a thousand
software packages. In this document I explain what the philosophy is
of Ruby (gem) software management and how we put it together. Feel free
to ask questions and contribute ideas. There are multiple possible 
tactics for sane dependency handling that GNU Guix could support.

* TODO GNU Guix installation

The achilles heel of introducing GNU Guix at this point (autumn 2014)
is that it is not standard in Linux distributions. That support will
come because GNU Guix is the official packaging system of the GNU
project and is orthogonal to existing software packaging systems (everything
is installed in /gnu). It will happen.

At this point there are two ways of installing GNU Guix. See the 
INSTALL document in this repository. Soon we'll add a binary installer,
which should make things easier.

* Ruby

The basic idea of GNU Guix is simple. A HASH value (SHA) is calculated 
over the inputs to a build. This includes the source code of Ruby, and the
switches used over configure and make. The software is installed under the
HASH, for example I have Ruby 2.1.2 and 2.1.3 on my system sitting under

  /gnu/store/wy8hwm8c01r2lsgkci67amg66pk9ml7a-ruby-2.1.3:
  bin  include  lib  share

  /gnu/store/yb9z2y7ndzra9r3x7l3020zjpds43yyc-ruby-2.1.2:
  bin  include  lib  share

and, for example, another ruby 1.8.7 under

  /gnu/store/2sd245py3i04y4yapvnp8cdpsykijllh-ruby-1.8.7:
  bin  lib  share

They are cleanly separated. Now if I were to change the configure for
2.1.3, for example a build without openssl, it would simply become
another HASH and therefore directory.

It gets even better, the HASH value is also calculated over the
dependencies. So, if you are running two different glibc's on your
system (each under its own HASH directory), or openssl's, the ruby
interpreter gets build against one of each and calculates a unique
HASH. So you can theoretically have four concurrent Ruby 2.1.3
installations, compiled against any combination of two glibc's and two
openssl's. The point is that you have full control over the dependency
graph!

To make a Ruby visible to a user, GNU Guix uses symlinks. Installing a
particular Ruby will symlink a so-called profile in
~/.guix-profile/bin. To run Ruby, simply run it as

  ~/.guix-profile/bin/ruby -v
  ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux]

The libraries that come with Ruby are also symlinked via
~/.guix-profile/lib/ruby/2.1.0/.  The numbering does not matter too
much since it points to an immutable (read-only) directory in

  ~/.guix-profile/lib -> /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib

(FIXME: the symlink should be at lib/ruby level)

This means that you can access Ruby libraries shipped with a
particular Ruby version, but that you can not write new files into
that directory! The Ruby installation is carved in stone.

* TODO Adding Gems in user land

Ruby comes with gem support out of the box. The gem tool also is symlinked
in ~/.guix-profile/bin. When we run `gem env' it says

  export PATH=~/.guix-profile/bin/:$PATH
  gem env

  RubyGems Environment:
  - RUBYGEMS VERSION: 2.2.2
  - RUBY VERSION: 2.1.3 (2014-09-19 patchlevel 242) [x86_64-linux]
  - INSTALLATION DIRECTORY: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib/ruby/gems/2.1.0
  - RUBY EXECUTABLE: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/bin/ruby
  - EXECUTABLE DIRECTORY: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/bin
  - SPEC CACHE DIRECTORY: /home/user/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/specs
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib/ruby/gems/2.1.0
     - /home/user/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/2.1.0

(FIXME: the INSTALLATION directory should install in $HOME, the $HOME
dir paths should also include the HASH)

The general idea is that we allow users to install their own gems, but
cleanly separated against the HASH dir that comes with the Ruby
installation. This way there is clear isolation between different
installed versions of Ruby. Unlike RVM and rbenv, there is NO
(accidental) sharing between different Ruby installations!

(FIXME: You should be able to use bundler too)

To achieve clean separation we can patch Ruby and gem to make use of the new
GEM_PATHs, or we can create a wrapper script which presets the PATH. At this
point I favour the patching because Ruby gem has these paths built-in.

* TODO Adding system shared gems

System shared gems are GNU Guix packages (unless you start explicitely overriding above 
GEM_PATHs). The advantage of using GNU Guix is that the dependency graph is explicit
and people can easily share installations. A gem gets installed with its version under
its own HASH dir, e.g.

  /gnu/store/HASH-rspec-1.0.0

This means (again) you can support multiple versions of gems. Under GNU Guix gems become
first-rate citizens in a software stack.

* TODO Generating GNU Guix Gem packages

The Gem specification is pretty straightforward. The great problem with rubygems is
that they are not designed for clear isolation of installations. With GNU Guix it
should be possible to generate installation packages from Gem definitions.

