-*- mode: org; coding: utf-8; -*-

#+TITLE: Hacking GNU Guix

* Introduction

'You are in a maze of twisty packages all alike...'

Hacking GNU Guix is an adventure. Not least because it is using Scheme
LISP in the GNU Ubiquitous Intelligent Language for Extensions
implementation, also known as Guile. You are encouraged to dive in to
LISP, a language that is so good it simply refuses to go away.

GNU Guix stands out as the 'hackable' package manager. Mostly because
it uses a powerful high-level programming language.

This document should get you started with Guile and GNU Guix. Just pick
any package description in the ./gnu directory and work from there. The
examples here are pulled from the ruby.scm package.

Once you have a running GNU Guix (see INSTALL), the next step is to
compile a package from a recent git checkout of the sources. Check out
the source tree following the instructions in the manual. Here we
start from a checked out GNU Guix git repository.

First a note of caution. Try to work one step at a time. GNU Guix is not
a simple system, so you are bound to get frustrated. But it is hackable,
that means you can solve any problem! And the reward is sane software
deployment. Guix will pay back your investment.

* Guile, the language

Guile is a LISP. Here we list some Scheme specific material that is used
by GNU Guix.

** Boolean #f, #t notation

Guess what, #f signifies false, #t signifies true.

** Hash colon (#:) notation

The #: signifies a symbol or literal keyword syntax and is used to 
create unique identifiers

  http://practical-scheme.net/wiliki/schemexref.cgi?keyword%3F

in Ruby, for example, #:key would be a colon notation :key.

** Key-values

GNU Guix uses key-value pairs extensively. With

  (build-system
    (name 'ruby)
    (description "The standard Ruby build system")
    (lower lower)))

the Guix build-system method is called with the functions name, decscription and lower, 
where the last is a function with the same name. The functions expand to whatever
data structure is required underneath by the package build system. These 
definitions are actually resolved as Guile records can be found in ./guix/packages.scm.
Look up 'define-record-type' to see how that works. In GNU Guix data is availabel
as build-system-name, build-system-description etc. Same for the package record which
delivers package-name, package-version, etc.

Also literal keywoard syntax
is used, e.g.,

  (build-expression->derivation store name builder
                                #:inputs inputs
                                #:system system
                                #:modules imported-modules
                                #:outputs outputs
                                #:guile-for-build guile-for-build))

calls the build-expression->derivation function (note that Guile can
use more than alphanum characters to create a function name) with
parameters store, name, builder and a list of variable key-value pairs
named #:inputs, inputs etc. The idea is that the number of parameters
is variable to the build-expression->derivation function.

** Defining a function

define and define* are used to define functions. Note that functions are
defined in a module or function local scope. define-module at the top of 
a package can export functions, e.g.

  (define-module (guix build-system ruby)
    #:use-module (guix store)
    #:export (ruby-build
              ruby-build-system))

The difference between define and define* is that the latter can handle
variable length parameter lists.

A thing to note is that every LISP function returns a value, i.e., the last
expression evaluated.

** Defining a variable

Use the let and let* functions to define multiple variables in scope. The 
difference between let and let* is that let* guarantees sequential initialization,
so you can cross-reference values in the list.

** Inside functions

One thing to note is the extensive use of backquote in GNU Guix. Backquote
is like quote, but only selected subexpressions are evaluated. These are
assigned with a comma, e.g.

       (ruby-build #:name ,name
                   #:source ,(match (assoc-ref inputs "source")
                               (((? derivation? source))
                                (derivation->output-path source))
                               ((source)
                                source)
                               (source
                                source))
                   #:system ,system
                   #:test-target ,test-target
                   #:tests? ,tests?
                   #:phases ,phases

Note match operator which is used for expression matching. Here 'source'
is matched to pull out the source path and generate a #:source key-value pair.

When ,@ is used, e.g. in

         (host-inputs `(,@(if source
                              `(("source" ,source))
                              '())
                        ,@inputs

                        ;; Keep the standard inputs of 'gnu-build-system'.
                        ,@(standard-packages)))

it indicates an expression to be evaluated and the elements of the
returned list inserted (the resulting list is 'spliced in').

** More about Guile/scheme

Use your editor to jump to function definitions inside the GNU Guix
source tree. With emacs you can use 'ctags -R -e' in the base
directory and load the TAGS file.  Jump to a tag with M-x find-tag. If
that does not find the tag, look the function up in the Guile manual.

Guile/scheme is a minimalistic implementation of LISP. This means it
is pretty easy to learn the language.  To read up on available
functionality, read the Guile manual online or in PDF. The procedure
index contains all available function calls for the language.

Running Guile stand-alone is easy using a command line REPL or inside emacs.
That allows you to play with language features, as well as call 
GNU Guix functionality directly.

* Guix, the language

GNU Guix is not a language. But as they say, LISP is used to create a
new language for every purpose (using macros). So here we list some of
the commonly used macros.

** Bags

Recently GNU Guix introduced bags as an intermediate form between packages
and derivations. A bag includes all the implicit inputs which is useful 
for processing.

** Renaming and moving files

                 (alist-replace
                  'install
                  (lambda* (#:key outputs #:allow-other-keys)
                    (let* ((out (assoc-ref outputs "out"))
                           (bin (string-append out "/bin")))
                      (mkdir-p bin)
                      (copy-file (string-append bin "/mpc123") (string-append bin "/mpc123"))))


* Starting the daemon

Do not forget to start the daemon

  guix-daemon --build-users-group=guix-builder

* Testing the package

> Do we have a HOWTO on how to run expressions in the Guile debugger?
> Never used that and would like to see how individual statements
> evaluate in LISP.

Basically there are two approaches.  From the command line, like this:

$ ./pre-inst-env guile
GNU Guile 2.0.11.20-4338f
Copyright (C) 1995-2014 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
scheme@(guile-user)> ,use (gnu packages ruby)
scheme@(guile-user)> ,use (guix)
scheme@(guile-user)> (define s (open-connection))
scheme@(guile-user)> ruby
$1 = #<package ruby-2.1.3 gnu/packages/ruby.scm:36 47d4dc0>
scheme@(guile-user)> (package-derivation s ruby)
ERROR: Unbound variable: sha256

# $2 = #<derivation /gnu/store/k0lvsy8jwcw0amv1rsmii2cvwfnmn2gz-python-3.3.5.drv 
# => /gnu/store/ij8xgynicdmnzb7pzmyb6bqi17s0ll3y-python-3.3.5 3f4fdc0>
# scheme@(guile-user)> (build-derivations s (list $2))
# $3 = #t

You may also want readline support:

  (use-modules (ice-9 readline))
  (activate-readline)

But the best thing, if you use Emacs, is to use Geiser, as noted in
‘HACKING’.  In addition to a REPL, it brings stuff like autodoc,
jump-to-definition, expression evaluation from the buffer, etc.

Install Geiser and add the guile path to ~/.emacs with

  (setq-default geiser-guile-load-path '("~/src/guix"))

Start geiser and you should be able to replicate above commands.

* Building the package

Usually I start with

  ./pre-inst-env guix package -A ruby
    ruby    2.1.3   out     gnu/packages/ruby.scm:37:2
    ruby    1.8.7-p374      out     gnu/packages/ruby.scm:37:2

to see if the package compiles. Next

  ./pre-inst-env guix build -K -e '(@ (gnu packages ruby) ruby)' 

* Fixing problems

Compiling the package there may be build problems. cd into the build directory

  cd /tmp/nix-build-ruby-2.1.3.drv-0

and 

  . environment-variables

will recreate the build environment. Now you can see where the build stopped by running
commands.
  
* Installing the package

Once the build works you can use standard guix to install the package

  ./pre-inst-env guix package -i ruby

This will also build from the source tree and blindly merges that
directory into your profile, but lacks information for updates etc:
  
  ./pre-inst-env guix package -e '(@ (gnu packages ruby) ruby)'

  guix package -i $(guix build ruby)

* Updating the version
** Getting the HASH value

  guix download http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz

* Making a patch

A patch can be sent to the mailing list. Use git rebase --interactive
to merge and squash patches into one. Next use the GNU ChangeLog
format which is a header with a filewise change description:

  gnu: Add Ruby.
    
  * gnu/packages/ruby.scm (Ruby): New file.
  * guix/licenses.scm: Add Ruby license information.

Use git format-patch to send a patch to the mailing list.  See also
the HACKING document in the Guix git repo.

* Hints

Read the HACKING documentation in the Guix source tree.

There are also videos on hacking in gnu.org/s/guix. 
* The Ruby package
* Ruby Gems

The first Ruby gem support by GNU Guix is ruby-i18n (internationalization). The 
definition looked like

(define-public ruby-i18n
  (package
    (name "ruby-i18n")
    (version "0.6.11")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://github.com/svenfuchs/i18n/archive/v"
                                  version ".tar.gz"))
              (sha256
               (base32
                "1fdhnhh1p5g8vibv44d770z8nq208zrms3m2nswdvr54072y1m6k"))))
    (build-system ruby-build-system)
    (arguments
     '(#:tests? #f)) ; requires bundler
    (synopsis "Internationalization library for Ruby")

so it downloads the tar ball. The build system looks like

(define ruby-build-system
  (build-system
    (name 'ruby)
    (description "The standard Ruby build system")
    (lower lower)))

which creates an expression using the standard build-system and the 
local lower function.

When you install it says

  The following environment variable definitions may be needed:
   export GEM_PATH="/home/wrk/.guix-profile/lib/ruby/gems/2.1.3"

which contains

  ls /home/wrk/.guix-profile/lib/ruby/gems/2.1.3/gems/i18n-0.6.11/
    gemfiles  lib  MIT-LICENSE  README.md  test

