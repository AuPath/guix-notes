-*- mode: org; coding: utf-8; -*-

#+TITLE: Hacking GNU Guix

* Introduction

Once you have a running GNU Guix (see INSTALL), the next step is to compile a package from a
recent git checkout of the sources. Check out the source tree following the instructions in
the manual. Here we start from a checked out GNU Guix git repository.

* Testing the package

> Do we have a HOWTO on how to run expressions in the Guile debugger?
> Never used that and would like to see how individual statements
> evaluate in LISP.

Basically there are two approaches.  From the command line, like this:

--8<---------------cut here---------------start------------->8---
$ ./pre-inst-env guile
GNU Guile 2.0.11.20-4338f
Copyright (C) 1995-2014 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
scheme@(guile-user)> ,use (gnu packages python)
scheme@(guile-user)> ,use (guix)
scheme@(guile-user)> (define s (open-connection))
scheme@(guile-user)> python
$1 = #<package python-3.3.5 gnu/packages/python.scm:46 2946840>
scheme@(guile-user)> (package-derivation s python)
$2 = #<derivation /gnu/store/k0lvsy8jwcw0amv1rsmii2cvwfnmn2gz-python-3.3.5.drv 
=> /gnu/store/ij8xgynicdmnzb7pzmyb6bqi17s0ll3y-python-3.3.5 3f4fdc0>
scheme@(guile-user)> (build-derivations s (list $2))
$3 = #t
--8<---------------cut here---------------end--------------->8---

But the best thing, if you use Emacs, is to use Geiser, as noted in
‘HACKING’.  In addition to a REPL, it brings stuff like autodoc,
jump-to-definition, expression evaluation from the buffer, etc.

Install Geiser and add the guile path to ~/.emacs with

  (setq-default geiser-guile-load-path '("~/src/guix"))

Start geiser and you should be able to replicate above commands.

* Building the package

  ./pre-inst-env guix build -K -e '(@ (gnu packages ruby) ruby)' 

* Fixing problems

Compiling the package there may be build problems. cd into the build directory

  cd /tmp/nix-build-ruby-2.1.3.drv-0

and 

  . environment-variables

will recreate the build environment. Now you can see where the build stopped by running
commands.
  
* Installing the package

Once the build works you can use standard guix to install the package

  ./pre-inst-env guix package -i ruby

or
  
  ./pre-inst-env guix package -e '(@ (gnu packages ruby) ruby)'

  guix package -i $(guix build ruby)

* Updating the version
** Getting the HASH value

  guix download http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz


* Making a patch

A patch can be sent to the mailing list. Use git rebase --interactive to
merge patches. Next use the GNU ChangeLog format which is a header
with a filewise change description:

  gnu: Add Ruby.
    
  * gnu/packages/ruby.scm (Ruby): New file.
  * guix/licenses.scm: Add Ruby license information.


* Hints

Read the HACKING documentation in the Guix source tree.

There are also videos on hacking in gnu.org/s/guix. 
