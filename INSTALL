-*- mode: org; coding: utf-8; -*-

#+TITLE: Installing GNU Guix

* Introduction

Software packaging is part of the programmer's toolbox. First and
foremost, for development you need a dependable and reproducable
environment. Second, to deploy software and test it you want
dependable and reproducable environments.  Few existing software
package management systems can guarantee that.

GNU Guix is a next generation software package installer with a range
of features, including sane dependency handling, transactional and
reproducable installs which can be rolled back. In short, GNU Guix has
resolved the fundamental problems of software deployment and
management.

Here we list the fundamental Guix bootstrap options, and run through
post-build installation.

* Install with existing package manager

It is to be expected that in 2015/16 the major package managers will 
install GNU Guix out of the box. Similar to allowing Perl or Python software
packagers, there should be no exception for the GNU package manager. In fact, 
the last is less intrusive than the others, since it does not install 
software in the same directories. Until the package managers decide to 
include GNU Guix we'll have to use one of the other following options.

* Binary installation

A binary install should be easy because all properly installed Guix
packages are independent from the underlying distribution - a package
can be created which contains a package with all its dependencies. The
only real dependency is the (Linux) kernel - which should have a
compatible API. Fortutely the fundamental API does not change that
often, so a binary distribution can be copied from machine to
machine. Of course, also the build target archicture has to match.
With a binary distribution it is possible to simply unpack the
package, create the build group and permissions.

* Bootstrap from source

Bootstrapping from source, after checking out the Guix source tree, is surprisingly
tricky because of the build dependencies. Your mileage may vary, but currently
I recommend against it.

* Bootstrap with Nix

Bootstrapping with Nix is possible, the package managers are 1st
cousins and use the same backend. The Guix package contained in Nix,
however, may be out of date and perhaps uses /gnu/store instead of
/nix/store. The latter should also work with Guix, but you don't get binary
downloads.

* Bootstrap with Docker

The store /gnu/store can be mounted inside a Docker image. This not only allows
sharing packages between docker images, but also gives the perspective of 
using Docker for bootstrapping Guix. Until now there is no such Docker download.

* Pjotr's installation

There is always a fly in the soup. Before autumn 2014, I was not
successful in installing GNU Guix, in fact, to get GNU Guix
running on Debian proved surprisingly hard. But with Guix 0.7 I got a
working installation on Debian (building from the source tarball) and
David and I created the first Ruby package in September 2014.

With guix 0.7 and 0.8 I have built from source on Debian.

  which guix

    /usr/local/bin/guix

  guix --version

    guix (GNU Guix) 0.8

* Post-build install

First we need to get the daemon running (try following the
installation instructions in the Guix manual)

  sudo guix-daemon --build-users-group=guix-builder

and

  guix package -i hello

    The following package will be installed:      
      hello-2.9    out     /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    The following file will be downloaded:
      /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    found valid signature for '/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9', from 'http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9'
    downloading `/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' from `http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' (0.2 MiB installed)...
    http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9       43.0 KiB transferred2 packages in profile

did a binary install of the hello package. A symlink was created in ~/.guix-profile/bin/ pointing to
/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9/bin/hello. After adding to the path

  export PATH=$HOME/.guix-profile/bin:$PATH

we can run 

  hello

    Hello, world!

Since GNU Guix development revolves around guile (the Scheme programming language) and emacs, let us 
install

  guix package -i guile
  guix package -i emacs

in both cases I got a successful install for guile and emacs.
  
To build a package from source, checkout the repository with git and run

  ./pre-inst-env guix build hello

downloaded a few more packages for building and compiled a new hello. This time with a different
path, presumably because these are different dependencies. This we can check:

  guix gc --references $(guix build hello)

    /gnu/store/1qf4rsznfhvdis39jzdmx0dfjy2jwzgz-gcc-4.8.3-lib
    /gnu/store/scmy8hnpccld0jszbgdw5csdc9z8f9jf-glibc-2.19
    /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9

To get the other one

  guix gc --references /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9  

    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

And you can tell that the dependencies are not the same. It gets better. You can list the 
build depencies too

  guix gc --requisites /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

    /gnu/store/2sflarfdfpcjkywy4hwknwrwxmx4rrhi-glibc-2.20-locales
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

How many package managers can achieve that?

