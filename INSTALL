-*- mode: org; coding: utf-8; -*-

#+TITLE: Installing GNU Guix

*NEWS FLASH*: GNU Guix can be installed in one go on most Linux installations!
 
See the tarball section below.

* Introduction

Software packaging is part of the programmer's toolbox. First and
foremost, for development you need a dependable and reproducable
environment. Second, to deploy software and test it you want
dependable and reproducable environments.  Few existing software
package management systems can guarantee that.

GNU Guix is a next generation software package installer with a range
of features, including sane dependency handling, transactional and
reproducable installs which can be rolled back. In short, GNU Guix has
resolved the fundamental problems of software deployment and
management.

Here we list the fundamental Guix bootstrap options, and run through
post-build installation.

* Install with an existing package manager

It is to be expected that in 2015/16 the major package managers will
install GNU Guix out of the box. Similar to allowing Docker, Perl or
Python software packagers, there should be no exception for the GNU
package manager. In fact, the GNU Guix is less intrusive than the
others, since it does not install software in the same directories as
the underlying package manager (such as apt or rpm). But, until the
Linux distributions decide to include GNU Guix, we'll have to use one
of the other following options.

* Binary installation

A binary install is easy because all properly installed Guix packages
are independent from the underlying distribution - a package can be
created which contains a software with all its dependencies. The only
real dependency is the (Linux) kernel. The fundamental Linux API does
not change that often so a binary distribution can be copied from
machine to machine. Of course, also the build target archicture has to
match.  With a binary distribution it is possible to simply unpack the
package, create the build group and permissions.

** The one-step tarball installation

Fetch the TAR ball 

    http://www.fdn.fr/~lcourtes/software/guix/guix-tarball-0.8.1.1140.tar.lz
    http://www.fdn.fr/~lcourtes/software/guix/guix-tarball-0.8.1.1140.tar.lz.sig
    SHA1: afde62b3e9f97f9ae0c57eaccfaca842b157cd2f

and unpack it in the root directory

    tar -C / --lzip -xvf guix-tarball-0.8.1.1140.tar.lz 

(on Debian you may need 'apt-get install lzip' first)

Add the guix-profile to the path

    export ~/.guix-profile/bin:$PATH

Set the store permissions and start the daemon after creating the
build users as described below. 

** From an existing GNU Guix installation

I thought I would be able to bootstrap using a USB image and copy
that to a local hard disk.

To bootstrap I have successfully downloaded a GNU Guix tarball 

    wget http://alpha.gnu.org/gnu/guix/gnu-usb-install-0.8.1.x86_64-linux.xz
    xz -d gnu-usb-install-0.8.x86_64-linux.xz 

mount it with kpartx

    kpartx -v -a gnu-usb-install-0.8.1.x86_64-linux
    mkdir mnt 
    mkdir tmp
    mount /dev/mapper/loop0p1 mnt
    cp -vau mnt/gnu tmp
    mv tmp/gnu/ /

* Set the store permissions

    chgrp guix-builder -R /gnu/store
    chmod 1775 /gnu/store

* Create build group and users

Now we have the /gnu/store in place we need to create a group and
users with build permissions for the Guix daemon. In bash

    builders=10
    groupadd guix-builder
    for i in `seq 1 $builders`; do
        useradd -g guix-builder -G guix-builder       \
            -d /var/empty -s `which nologin`          \
            -c "Guix build user $i" --system          \
            guix-builder$i;
    done

(set the number of builders to the number of cores).

Also the store comes with meta-data in the form of a sqlite
database. This sits in /var/guix. Copy also this directory to the new
system before running guix.

* Start the GNU Guix daemon

Now you should be able to run Guix with

    guix-daemon --build-users-group=guix-builder

    /gnu/store/(...)-guix-0.8(...)/bin/guix --help

* Set the key

To enable binary installs you need to authorize it with a key which can 
be found with guix

  guix archive --authorize < ~/.guix-profile/share/guix/hydra.gnu.org.pub 

Note that you can also call GNU Guix from its direct path, e.g.

  /gnu/store/8lays(...)-guix-0.8.47739f5/bin/guix archive --authorize < /gnu/store/8lay(...)-guix-0.8.47739f5/share/guix/hydra.gnu.org.pub

* Update the package list

   guix pull

downloads the latest Guix source code and package descriptions, and
deploys it.  Update guix (do this as root so the daemon does not get
garbage collected later).

   guix package -i guix

you may want to restart the daemon after a successful upgrade.

* Use guix as a normal user

As a normal user you can now install software (see below install the
hello package). Guix will ask you to install a dir for the user in
/var/guix/profiles/per-user/. You can add mkdir
/var/guix/profiles/per-user/pjotr/guix-profile/bin and link guix from there.

* Install the hello package

  guix package -i hello

    The following package will be installed:      
      hello-2.9    out     /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    The following file will be downloaded:
      /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9
    found valid signature for '/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9', from 'http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9'
    downloading `/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' from `http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9' (0.2 MiB installed)...
    http://hydra.gnu.org/nar/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9       43.0 KiB transferred2 packages in profile

did a binary install of the hello package. A symlink was created in ~/.guix-profile/bin/ pointing to
/gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9/bin/hello. 

Note that you have the great luxury of interrupting GNU Guix at any
point during build and installation. That is because it is TRANSACTION
SAFE!

Another luxury is that you can copy packages from one dir/machine to
another. It is SAFE because each package is isolated from
another. Note: you may need to copy the dependencies too.

* Add symlinks to the PATH

After adding to the path

  export PATH=$HOME/.guix-profile/bin:$PATH

we can run 

  hello

    Hello, world!

Since GNU Guix development revolves around guile (the Scheme programming language) and emacs, let us 
install

  guix package -i guile
  guix package -i emacs

in both cases I got a successful install for guile and emacs.
  
To build a package from source, checkout the repository with git and run

  ./pre-inst-env guix build hello

downloaded a few more packages for building and compiled a new hello. This time with a different
path, presumably because these are different dependencies. This we can check:

  guix gc --references $(guix build hello)

    /gnu/store/1qf4rsznfhvdis39jzdmx0dfjy2jwzgz-gcc-4.8.3-lib
    /gnu/store/scmy8hnpccld0jszbgdw5csdc9z8f9jf-glibc-2.19
    /gnu/store/yfipxvqnibw17ncp4c828hhcwsbxc3d7-hello-2.9

To get the other one

  guix gc --references /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9  

    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

And you can tell that the dependencies are not the same. It gets better. You can list the 
build depencies too

  guix gc --requisites /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

    /gnu/store/2sflarfdfpcjkywy4hwknwrwxmx4rrhi-glibc-2.20-locales
    /gnu/store/px5ks6hyjszqp269l9b91354zjclv6c2-gcc-4.8.3-lib
    /gnu/store/3h38sfay2f02rk4i768ci8xabl706rf9-glibc-2.20
    /gnu/store/77dzhv9yx5x2rq370swp8scsps961pj6-hello-2.9

How many package managers can achieve that?

* Set locale

If you see the message 

:  warning: failed to install locale: Invalid argument

it means your locale needs to be found. Guix comes with a locale database

:  guix package -i glibc-utf8-locales

and set the LOCPATH

:  export LOCPATH=$HOME/.guix-profile/lib/locale

Choose one from

:  ls $LOCPATH
:  export LC_ALL=en_US.UTF-8

Alternatively set the LOCPATH to your underlying distribution

* Other installation routes
** Bootstrap from source

Bootstrapping from source, after checking out the git Guix source tree
is surprisingly tricky because of the build dependencies. Your mileage
may vary, but currently I recommend using the tar-ball install
described above.

** Building GNU Guix from source

There is always a fly in the soup. Before autumn 2014, I was not
successful in installing GNU Guix from source, in fact, to get GNU Guix
running on Debian proved surprisingly hard. But with Guix 0.7 I got a
working installation on Debian (building from the source tarball) and
David and I created the first Ruby package in September 2014.

You'll need autoconf, automake and a few other packages.

With guix 0.7 and 0.8 I have built from source on Debian.

  which guix

    /usr/local/bin/guix

  guix --version

    guix (GNU Guix) 0.8

NOTE: When upgrading guix through guix (i.e., 'guix package -i guix')
make sure the same metadata is seen by the new daemon! The old one may
be using the /usr/local prefix, so the metadata will be in
/usr/local/var/guix while the new one may expect the data in
/var/guix. A symlink may solve it.

** Bootstrap with Nix

Bootstrapping with Nix is possible, the package managers are 1st
cousins and use the same backend. The Guix package contained in Nix,
however, may be out of date and perhaps uses /gnu/store instead of
/nix/store. The latter should also work with Guix, but you don't get binary
downloads.

** Bootstrap with Docker

The store /gnu/store can be mounted inside a Docker image. This not only allows
sharing packages between docker images, but also gives the perspective of 
using Docker for bootstrapping Guix. Until now there is no such Docker download.

* Continue with Ruby installation and environment

There is a write-up in the RUBY file in this repository.

* Continue with Python installation and environment

There is a write-up in the PYTHON file in this repository.
