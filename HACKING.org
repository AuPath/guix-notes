#+TITLE: Pjotr's hacking guide to GNU Guix

* Table of Contents                                                     :TOC:
 - [[#introduction][Introduction]]
 - [[#guile-the-language][Guile, the language]]
     - [[#boolean-f-t-notation][Boolean #f, #t notation]]
     - [[#hash-colon--notation][Hash colon (#:) notation]]
     - [[#percentage--notation][Percentage (%) notation]]
     - [[#key-values][Key-values]]
     - [[#defining-a-function][Defining a function]]
     - [[#defining-a-variable][Defining a variable]]
     - [[#inside-functions][Inside functions]]
     - [[#more-about-guilescheme][More about Guile/scheme]]
 - [[#guix-the-language][Guix, the language]]
     - [[#expressions][Expressions]]
     - [[#bags][Bags]]
     - [[#renaming-and-moving-files][Renaming and moving files]]
 - [[#starting-the-daemon][Starting the daemon]]
 - [[#install-guix-from-the-git-repository][Install Guix from the git repository]]
     - [[#checkout-guix-from-git][Checkout Guix from git]]
     - [[#build-guix-current][Build Guix (current)]]
     - [[#from-the-command-line][From the command line]]
 - [[#creating-a-package][Creating a package]]
     - [[#updating-the-version][Updating the version]]
     - [[#updating-the-hash-value][Updating the HASH value]]
 - [[#building-the-package][Building the package]]
 - [[#debugging-the-package][Debugging the package]]
     - [[#in-progress-debugging-inside-guile][IN PROGRESS Debugging inside Guile]]
 - [[#fixing-problems][Fixing problems]]
 - [[#installing-the-package][Installing the package]]
 - [[#making-a-patch-to-submit-to-the-mailing-list][Making a patch to submit to the mailing list]]
     - [[#using-git-branches][Using git branches]]
 - [[#hints][Hints]]
     - [[#using-emacs][Using emacs]]
 - [[#the-ruby-package][The Ruby package]]
     - [[#ruby-gems][Ruby Gems]]
 - [[#dealing-with-special-or-non-free-packages][Dealing with special or non-free packages]]
 - [[#todo-create-a-caching-server][TODO Create a caching server]]

* Introduction

'You are in a maze of twisty packages all alike...'

Hacking GNU Guix is an adventure. Not least because it is using Scheme
LISP in the GNU Ubiquitous Intelligent Language for Extensions
implementation, also known as Guile. You are encouraged to dive in to
LISP, a language that is so good it simply refuses to go away.

GNU Guix stands out as the 'hackable' package manager. Mostly because
it uses a powerful high-level programming language.

This document should get you started with Guile and GNU Guix. Just pick
any package description in the ./gnu directory and work from there. The
examples here are pulled from the ruby.scm package.

Once you have a running GNU Guix (see INSTALL), the next step is to
compile a package from a recent git checkout of the sources. Check out
the source tree following the instructions in the manual. Here we
start from a checked out GNU Guix git repository.

First a note of caution. Try to work one step at a time. GNU Guix is not
a simple system, so you are bound to get frustrated. But it is hackable,
that means you can solve any problem! And the reward is sane software
deployment. Guix will pay back your investment.

Before hacking GNU Guix it may be worth contemplating the speed of the
network connection: in short, the faster the better. Caching packages
somewhere may be worth considering too. Finally a fast server may be a
good thing too because GNU Guix is designed to build packages in parallel.

* Guile, the language

Guile is a Scheme LISP. Here we list some Scheme specific material that is used
by GNU Guix. There is much information on the web on Scheme. Check out 
[[http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm][Scheme at a Glance]], for example.

** Boolean #f, #t notation

#f signifies false, #t signifies true.

** Hash colon (#:) notation

The #: signifies a symbol or literal keyword syntax and is used to 
create unique identifiers, see also

  http://practical-scheme.net/wiliki/schemexref.cgi?keyword%3F

in Ruby, for comparison, #:key would be in colon notation :key.

** Percentage (%) notation

The percentage is a syntactical name helper used to generate and
create values available in scope.  For example, the output file name
is reified via the %output variable automatically added to builderâ€™s
scope. Input file names are similarly reified through the
%build-inputs variable. Both variables are non-hygienically introduced
in the build expression by build-expression->derivation.

** Key-values

GNU Guix uses key-value pairs extensively. With

#+begin_src scheme
  (build-system
    (name 'ruby)
    (description "The standard Ruby build system")
    (lower lower)))
#+end_src

the Guix build-system method is called with the functions name,
decscription and lower, where the last is a function with the same
name. The functions expand to whatever data structure is required
underneath by the package build system. These definitions are actually
resolved as Guile records can be found in ./guix/packages.scm.  Look
up 'define-record-type' defined in ./guix/build-system.scm to see how
that works:

#+begin_src scheme
(define-record-type* <build-system> build-system make-build-system
  build-system?
  (name        build-system-name)         ; symbol
  (description build-system-description)  ; short description
  (lower       build-system-lower))       ; args ... -> bags

;; "Bags" are low-level representations of "packages".  The system and target
;; of a bag is fixed when it's created.  This is because build systems may
;; choose inputs as a function of the system and target.
(define-record-type* <bag> bag %make-bag
  bag?
  (name          bag-name)               ;string

  (system        bag-system)             ;string
  (target        bag-target              ;string | #f
                 (default #f))

  ;; Here we use build/host/target in the sense of the GNU tool chain (info
  ;; "(autoconf) Specifying Target Triplets").
  (build-inputs  bag-build-inputs        ;list of packages
                 (default '()))
  (host-inputs   bag-host-inputs         ;list of packages
                 (default '()))

  ;; "Target inputs" are packages that are built natively, but that are used
  ;; by target programs in a cross-compilation environment.  Thus, they act
  ;; like 'inputs' as far as search paths are concerned.  The only example of
  ;; that is the cross-libc: it is an input of 'cross-gcc', thus built
  ;; natively; yet, we want it to be considered as a target input for the
  ;; purposes of $CPATH, $LIBRARY_PATH, etc.
  (target-inputs bag-target-inputs
                 (default '()))
  (outputs       bag-outputs             ;list of strings
                 (default '("out")))
  (arguments     bag-arguments           ;list
                 (default '()))
  (build         bag-build))             ;bag -> derivation
#+end_src


In GNU Guix data is
available as build-system-name, build-system-description etc. Same for
the package record which delivers package-name, package-version, etc.

Also literal keywoard syntax is used, e.g.,

#+begin_src scheme
  (build-expression->derivation store name builder
                                #:inputs inputs
                                #:system system
                                #:modules imported-modules
                                #:outputs outputs
                                #:guile-for-build guile-for-build))
#+end_src

calls the build-expression->derivation function (note that Guile can
use more than alphanum characters to create a function name) with
parameters store, name, builder and a list of variable key-value pairs
named #:inputs, inputs etc. The idea is that the number of parameters
is variable to the build-expression->derivation function.

** Defining a function

define and define* are used to define functions. Note that functions are
defined in a module or function local scope. define-module at the top of 
a package can export functions, e.g.

#+begin_src scheme
  (define-module (guix build-system ruby)
    #:use-module (guix store)
    #:export (ruby-build
              ruby-build-system))
#+end_src

The difference between define and define* is that the latter can handle
variable length parameter lists.

A thing to note is that every LISP function returns a value, i.e., the last
expression evaluated.

** Defining a variable

Use the let and let* functions to define multiple variables in scope. The 
difference between let and let* is that let* guarantees sequential initialization,
so you can cross-reference values in the list.

** Inside functions

One thing to note is the extensive use of backquote in GNU Guix. Backquote
is like quote, but only selected subexpressions are evaluated. These are
assigned with a comma, e.g.

#+begin_src scheme
       (ruby-build #:name ,name
                   #:source ,(match (assoc-ref inputs "source")
                               (((? derivation? source))
                                (derivation->output-path source))
                               ((source)
                                source)
                               (source
                                source))
                   #:system ,system
                   #:test-target ,test-target
                   #:tests? ,tests?
                   #:phases ,phases
#+end_src

Note match operator which is used for expression matching. Here 'source'
is matched to pull out the source path and generate a #:source key-value pair.

When ,@ is used, e.g. in

#+begin_src scheme
         (host-inputs `(,@(if source
                              `(("source" ,source))
                              '())
                        ,@inputs

                        ;; Keep the standard inputs of 'gnu-build-system'.
                        ,@(standard-packages)))
#+end_src

it indicates an expression to be evaluated and the elements of the
returned list inserted (the resulting list is 'spliced in').

** More about Guile/scheme

Use your editor to jump to function definitions inside the GNU Guix
source tree. With emacs you can use 'ctags -R -e' in the base
directory and load the TAGS file.  Jump to a tag with M-x find-tag. If
that does not find the tag, look the function up in the Guile manual.

Guile/scheme is a minimalistic implementation of LISP. This means it
is pretty easy to learn the language.  To read up on available
functionality, read the Guile manual online or in PDF. The procedure
index contains all available function calls for the language.

Running Guile stand-alone is easy using a command line REPL or inside emacs.
That allows you to play with language features, as well as call 
GNU Guix functionality directly.

* Guix, the language

GNU Guix is not a language per se. But as they say, LISP is used to
create a new language for every purpose (using macros). So here we
list some of the commonly used macros.

** Expressions

A good explanation of expressions (a derivation in Nix-speak) and how
they are implemented can be found on [[https://en.wikisource.org/wiki/Functional_Package_Management_with_Guix/Build_expressions_and_package_descriptions][Wikisource]]. Actually at the low 
level an expression returns a derivation variable or structure.

** Bags

Recently GNU Guix introduced bags as an intermediate form between packages
and derivations. A bag includes all the implicit inputs which is useful 
for processing.

** Renaming and moving files

Replace the install phase with a function that adds /bin to outputs
and makes sure to make the directory and copy a file named mpc123 into
bin:

#+begin_src scheme
    (alist-replace
     'install
     (lambda* (#:key outputs #:allow-other-keys)
       (let* ((out (assoc-ref outputs "out"))
              (bin (string-append out "/bin")))
         (mkdir-p bin)
         (copy-file (string-append bin "/mpc123") (string-append bin "/mpc123"))))
#+end_src

* Starting the daemon

Do not forget to start the daemon

#+begin_src scheme
  guix-daemon --build-users-group=guix-builder
#+end_src

* Install Guix from the git repository

** Checkout Guix from git

Clone the Guix git repository.

** Build Guix (current)

First build Guix from source so you can run guix from the
repository. See the section [[https://github.com/pjotrp/guix-notes/blob/master/INSTALL.org#building-gnu-guix-from-source-using-guix][Building GNU Guix from source]] in [[https://github.com/pjotrp/guix-notes/blob/master/INSTALL.org][INSTALL]].

** From the command line

Once you have Guix running you can pass it the path to the package repository:

#+begin_src sh
./pre-inst-env guix --load-path ./gnu 
#+end_src 

* Creating a package
** Updating the version

The version is located in the package definition. E.g.

#+begin_src scheme
(define-public ruby-2.1
  (package (inherit ruby)
    (version "2.1.6")
    (source
     (origin
       (method url-fetch)
       (uri (string-append "http://cache.ruby-lang.org/pub/ruby/"
                           (version-major+minor version)
                           "/ruby-" version ".tar.bz2"))
       (sha256
        (base32
         "1r4bs8lfwsypbcf8j2lpv3by40729vp5mh697njizj97fjp644qy"))))
#+end_src

** Updating the HASH value

#+begin_src scheme
  guix download http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz
#+end_src

* Building the package

From a prebuilt guix in the source tree one can start with

#+begin_src scheme
  ./pre-inst-env guix package -A ruby
    ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2
    ruby    2.1.6   out     gnu/packages/ruby.scm:91:2
    ruby    2.2.2   out     gnu/packages/ruby.scm:39:2
#+end_src

to see if the package compiles. Note that Guix contains three versions
of Ruby!  Next try the explicit package compile which should return
the destination

#+begin_src scheme
  ./pre-inst-env guix build -K -e '(@ (gnu packages ruby) ruby-2.1)' 
  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6
#+end_src

* Debugging the package

** IN PROGRESS Debugging inside Guile

*Note*: this section is not complete

Basically there are two approaches.  From the command line, like this:

#+begin_src scheme
  $ ./pre-inst-env guile
    GNU Guile 2.0.11.20-4338f
    Copyright (C) 1995-2014 Free Software Foundation, Inc.

  Enter `,help' for help.
  scheme@(guile-user)> ,use (gnu packages ruby)
  scheme@(guile-user)> ,use (guix)
  scheme@(guile-user)> (define s (open-connection))
  scheme@(guile-user)> ruby
  $1 = #<package ruby-2.1.3 gnu/packages/ruby.scm:36 47d4dc0>
  scheme@(guile-user)> (package-derivation s ruby)
  ERROR: Unbound variable: sha256

    $2 = #<derivation /gnu/store/k0lvsy8jwcw0amv1rsmii2cvwfnmn2gz-python-3.3.5.drv 
      => /gnu/store/ij8xgynicdmnzb7pzmyb6bqi17s0ll3y-python-3.3.5 3f4fdc0>
    scheme@(guile-user)> (build-derivations s (list $2))
    $3 = #t
#+end_src

You may also want readline support:

#+begin_src scheme
  (use-modules (ice-9 readline))
  (activate-readline)
#+end_src

But the best thing, if you use Emacs, is to use Geiser, as noted in
â€˜HACKINGâ€™.  In addition to a REPL, it brings stuff like autodoc,
jump-to-definition, expression evaluation from the buffer, etc.

Install Geiser and add the guile path to ~/.emacs with

#+begin_src scheme
  (setq-default geiser-guile-load-path '("~/src/guix"))
#+end_src

Start geiser and you should be able to replicate above commands.

* Fixing problems

Compiling the package there may be build problems. cd into the build directory

#+begin_src scheme
  cd /tmp/nix-build-ruby-2.1.3.drv-0
#+end_src

and 

#+begin_src scheme
  . environment-variables
#+end_src

will recreate the build environment. Now you can see where the build stopped by running
commands.
  
* Installing the package

Once the build works you can use standard guix to install the package

#+begin_src scheme
  ./pre-inst-env guix package -i ruby
#+end_src

This will also build from the source tree and blindly merges that
directory into your profile, but lacks information for updates etc:

#+begin_src scheme
  ./pre-inst-env guix package -e '(@ (gnu packages ruby) ruby)'
#+end_src

#+begin_src scheme
  guix package -i $(guix build ruby)
#+end_src

* Making a patch to submit to the mailing list

A patch can be sent to the mailing list. Use git rebase --interactive
to merge and [[http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html][squash patches]] into one. Next use the GNU ChangeLog
format which is a header with a filewise change description:

#+begin_src scheme
  gnu: Add Ruby.
    
  * gnu/packages/ruby.scm (Ruby): New file.
  * guix/licenses.scm: Add Ruby license information.
#+end_src

Use git format-patch to send a patch to the mailing list.  

You can set up an environment to hack on Guix by entering the clone
directory and running

#+begin_src scheme
    guix environment guix
#+end_src

Then you can just run make to see if everything builds fine.  If it
does, make a commit with an appropriate commit message (see Pjotr's
email for an example) and use

#+begin_src scheme
    git format-patch -1
#+end_src

to generate a patch file, which you can then send to the Guix-devel
mailing list (guix-devel@gnu.org).

To change the last commit message do

: git commit --amend

See also the official HACKING document in the Guix git repo.

** Using git branches

It may be a good idea to keep the master branch in sync with that of Guix.
When adding something new checkout a branch first

: git checkout -b dev

Now to creat a patch to send to the mailing list do

: git commit -a -m 'My last commit'
: git checkout master
: git checkout -b submit
: git rebase --interactive dev

Squash the commits into one

* Hints

Read the HACKING documentation in the Guix source tree.

There are also videos on hacking in gnu.org/s/guix. 

** Using emacs

Emacs has powerful support for editing LISP (unsurprisingly, perhaps).

*** Key binding

+ C-M-f and C-M-b move to forward/backward to matching braces

* The Ruby package

** Ruby Gems

The first Ruby gem support by GNU Guix is ruby-i18n (internationalization). The 
definition looked like

#+begin_src scheme
  (define-public ruby-i18n
  (package
    (name "ruby-i18n")
    (version "0.6.11")
    (source (origin
              (method url-fetch)
              (uri (string-append "https://github.com/svenfuchs/i18n/archive/v"
                                  version ".tar.gz"))
              (sha256
               (base32
                "1fdhnhh1p5g8vibv44d770z8nq208zrms3m2nswdvr54072y1m6k"))))
    (build-system ruby-build-system)
    (arguments
     '(#:tests? #f)) ; requires bundler
    (synopsis "Internationalization library for Ruby")
#+end_src

so it downloads the tar ball. The build system looks like

#+begin_src scheme
(define ruby-build-system
  (build-system
    (name 'ruby)
    (description "The standard Ruby build system")
    (lower lower)))
#+end_src

which creates an expression using the standard build-system and the 
local lower function.

When you install it says

#+begin_src scheme
  The following environment variable definitions may be needed:
   export GEM_PATH="/home/wrk/.guix-profile/lib/ruby/gems/2.1.3"
#+end_src

which contains

#+begin_src scheme
  ls /home/wrk/.guix-profile/lib/ruby/gems/2.1.3/gems/i18n-0.6.11/
    gemfiles  lib  MIT-LICENSE  README.md  test
#+end_src
* Dealing with special or non-free packages

Some packages won't make it into GNU Guix. If you have need a special section,
simply create a directory with packages and add them to the GUIX_PACKAGE_PATH:

: export GUIX_PACKAGE_PATH="~/code/guix-nonfree"

* TODO Create a caching server
