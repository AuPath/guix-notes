* D Language support in GNU Guix

(WIP)

** Packaging ldc

First off, packaging a compiler is a tedious job. Mostly because it
takes a long time to build and test! Trick is to do something else at
the same time ;). The actual steps are not that lengthy once you have
the build under control.

*** Building ldc compiler and phobos

Build the package with -K option.

#+BEGIN_SRC sh
./pre-inst-env guix build --no-grafts --no-substitutes ldc -K
#+END_SRC sh

Note you can see the output of the build with

: cd /tmp/guix-build-ldc-1.7.0.drv-2
: cat build/Testing/Temporary/LastTest.log

After a build fail, change into the created dir and git init, e.g.

#+BEGIN_SRC sh
cd /tmp/guix-build-ldc-1.7.0.drv-2/ldc-1.7.0
git init
git add .
git commit -a -m init
#END_SRC

set the environment in a pure fashion

#+BEGIN_SRC sh
env -i /bin/bash --login --noprofile --norc
cd /tmp/guix-build-ldc-1.7.0.drv-2/
. environment-variables
cd ldc-1.7.0
cmake .
make -j 24
make test -j 24
#+END_SRC sh

to make one test set

: make -j 24 phobos2-test-runner-debug

and run the tests

: /tmp/guix-build-ldc-1.7.0.drv-2/ldc-1.7.0# /usr/bin/unshare -n runtime/phobos2-test-runner-debug

note the originals are still in

: ../build/runtime/phobos2-test-runner-debug build-druntime-test-runner-debug

If your environment is correct you should see

: set|grep HOME
: HOME=/homeless-shelter

to disable network access run as root

: /usr/bin/unshare -n ../build/runtime/phobos2-test-runner-debug

Which throws an error

: shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
: /gnu/store/kpxi8h3669afr9r1bgvaf9ij3y4wdyyn-bash-minimal-4.4.12/bin/sh: /tmp/guix-build-ldc-1.7.0.drv-0/std.process temporary file ebe1260e-300b-460c-adf1-880a8459b3dd: No such file or directory
: ****** FAIL release64 std.process
: core.exception.AssertError@std/process.d(1196): assertThrown failed: No ProcessException was thrown.

edit the file (disable the test), rebuild and test. A git diff for this one looks like

#+BEGIN_SRC diff
diff --git a/runtime/phobos/std/process.d b/runtime/phobos/std/process.d
index df83296..d921cdb 100644
--- a/runtime/phobos/std/process.d
+++ b/runtime/phobos/std/process.d
@@ -1171,7 +1171,7 @@ version (Posix) @system unittest
-@system unittest // Specifying a bad working directory.
+@system version(skipunittest) unittest // Specifying a bad working directory.
#+END_SRC

To run tests with a shared library:

: cd /tmp/guix-build-ldc-1.7.0.drv-2/build/runtime
: env LD_LIBRARY_PATH=../lib/ /usr/bin/unshare -n ./druntime-test-runner-shared

In the final step

: ./pre-inst-env guix environment guix --pure -- ./pre-inst-env guix build ldc@1.7.0 -K

or a more complete

: rm -rf /tmp/guix-build-ldc-0.17.4.drv-* ; time ./pre-inst-env guix environment guix --pure -- ./pre-inst-env guix build ldc --no-substitutes -K

Note you may want to remove the keep dir every time you rerun. In my
version the environment contained a path reference to
/tmp/guix-build-ldc-1.7.0.drv-0 even though I was in a different drv-2 tree.

The list tests can be run with

: cd tests
: ./runlit.py -v codegen/align.d
: ./runlit.py -v .

To speed up the Guix build + testing you can inject something like

#+BEGIN_SRC scheme
           (replace 'check
                    (lambda* (#:key inputs outputs #:allow-other-keys)
                      (setenv "SHELL" (which "sh"))
                      (setenv "CC" (string-append (assoc-ref inputs "gcc") "/bin/gcc"))
                      (with-directory-excursion "tests"
                                                (zero? (system* "make"))
                                                (zero? (system* "./runlit.py" "-v" ".")))
                      (zero? (system* "make" "phobos2-test-runner-debug" "-j" (number->string (parallel-job-count))))
                      (system* "../build/runtime/phobos2-test-runner-debug")
                      ))
           (add-after 'check 'break (lambda () (#f)))
#+END_SRC

Check also these hints

https://wiki.dlang.org/Building_and_hacking_LDC_on_Windows_using_MSVC
https://wiki.dlang.org/LDC_Lit-based_testsuite
