#+TITLE: Running GNU Guix on top of bare Debian with SysV

* Table of Contents                                                       :TOC:
 - [[#introduction][Introduction]]
 - [[#install-a-bare-debian][Install a bare Debian]]
 - [[#copy-gnu-guix][Copy GNU Guix]]
 - [[#start-replacing-services][Start replacing services]]
   - [[#running-services][Running services]]
   - [[#openssh-on-guix][openssh on Guix]]
 - [[#setting-up-the-desktop][Setting up the desktop]]
   - [[#graphics-driver][Graphics driver]]
   - [[#fonts][Fonts]]
   - [[#keyboard-layout][Keyboard layout]]

* Introduction

This section deals with running GNU Guix as a package manager inside
an existing distribution. Before I make the full jump to runnning
GuixSD I decided to run a bare bones Debian with SysV on my laptop (I
am one of the people who does not like systemd) so I still get apt and
Debian firmware support when I need it. And then one day, when I know
I no longer need apt, I may take the plunge into running GuixSD on my
laptop (servers will be easier).

* Install a bare Debian

Since I already had a Debian installed I could use [[https://wiki.debian.org/Debootstrap][debootstrap]] to
install a minimal distro on a fresh partition. I used a 10Gb
partition, which should be large enough as Guix will go on another
partition.

: debootstrap stable /mnt/sda3/ http://ftp.nl.debian.org/debian/

That installs about 170 packages(!) and we may start purging some
later.

After the chroot, install SysV and purge systemd according to [[http://without-systemd.org/wiki/index.php/How_to_remove_systemd_from_a_Debian_jessie/sid_installation][info]]. Edit
/etc/fstab to match your system and install kernel and headers

: apt-get install linux-image-amd64 linux-headers-3.16.0-4-all-amd64

which also fetches the free firmware. I also added a networking
interface and the openssh software so I can configure remotely.  Now
we are at 270-odd packages.  Also add users/groups in the new
partition so you can login.

Install grub2 on the boot partition

#+begin_src sh
apt-get install grub2
update-grub2
grub-install /dev/sda
#+end_src

and reboot (boot with grub console if the menu is not up to date). At
850Gb installed it is still a surprising amount of software!

* Copy GNU Guix

Next create a partition for Guix and start installing. The quickest
way is to copy the relevant files from another system. Guix is good at
that because it does not interfere with anything else. Simple way is
to copy all files in /gnu/store, /var/guix and the .guix-profile
directory in your home dir (note that the proper way to do this is via
guix archive).  The store on my running laptop is 12Gb in size. It
probably is a good idea to reserve at least 20GB.

You may need to set the key and update guix according to [[https://github.com/pjotrp/guix-notes/blob/master/INSTALL.org#binary-installation][guix-notes]].

When everything works there is probably nothing else to install
because my previous /gnu/store was up-to-date! For example, my
installation of python and elixir with dependencies just worked (tm).
There is no smoother way to move from one machine to another.

* Start replacing services

** Running services

On my bare system only the following services are running (outside
kernel stuff):

#+begin_src sh
ps xau|grep bin
root      1180  0.0  0.0 258672  2252 ?        Ssl  Jun12   0:00 /usr/sbin/rsyslogd
root      1227  0.0  0.0  25904  2076 ?        Ss   Jun12   0:00 /usr/sbin/cron
root      1238  0.0  0.0  19276  1684 ?        Ss   Jun12   0:07 /usr/sbin/irqbalance --pid=/var/run/irqbalance.pid
root      1269  0.0  0.0  55184  3224 ?        Ss   Jun12   0:00 /usr/sbin/sshd
root      1293  0.0  0.0  12844  1736 tty1     Ss+  Jun12   0:00 /sbin/getty 38400 tty1
root      1294  0.0  0.0  12844  1788 tty2     Ss+  Jun12   0:00 /sbin/getty 38400 tty2
root      1295  0.0  0.0  12844  1860 tty3     Ss+  Jun12   0:00 /sbin/getty 38400 tty3
root      1296  0.0  0.0  12844  1840 tty4     Ss+  Jun12   0:00 /sbin/getty 38400 tty4
root      1297  0.0  0.0  12844  1768 tty5     Ss+  Jun12   0:00 /sbin/getty 38400 tty5
root      1298  0.0  0.0  12844  1852 tty6     Ss+  Jun12   0:00 /sbin/getty 38400 tty6
root      2457  0.0  0.0  20312  3352 pts/3    Ss   00:58   0:00 /bin/bash
root      2458  0.0  0.0  33872  4008 pts/3    S+   00:58   0:00 /home/pjotr/.guix-profile/bin/guix-daemon --build-users-group=guixbuild
#+end_src

Nice and minimalistic.

** openssh on Guix

The first candidate is to run openssh server through Guix because Guix
contains a more modern edition, e.g. on Debian stable (which just came
out) compared with guix:

#+begin_src sh
/usr/bin/ssh -V
  OpenSSH_6.7p1 Debian-5+deb8u2, OpenSSL 1.0.1t  3 May 2016
guix package -A ssh
  libssh  0.7.3   out     gnu/packages/ssh.scm:46:2
  libssh2 1.7.0   out     gnu/packages/ssh.scm:89:2
  openssh 7.2p2   out     gnu/packages/ssh.scm:116:2
#+end_src

As root on guix install openssh

#+begin_src sh
guix package -i openssh
~/.guix-profile/bin/ssh -V
OpenSSH_7.2p2, OpenSSL 1.0.2h  3 May 2016
#+end_src

now we want to tell the server to use this. First try by hand, e.g.

#+begin_src sh
/root/.guix-profile/sbin/sshd -f /etc/ssh/sshd_config
#+end_src

next update the script in /etc/init.d/ssh to use this command.

Once it works we purge ssh from Debian

#+begin_src sh
apt-get remove openssh-server openssh-client openssh-sftp-server
#+end_src

Feeling lighter already ;)

* Setting up the desktop

** Graphics driver

First thing we need is a driver for X. My laptop has an intel card.
Install the following as root (and later as normal user)

#+begin_src sh
guix package -i xf86-video-intel xorg-server xinit slim \
   xterm xf86-input-keyboard xf86-input-mouse xf86-input-evdev \
   xf86-input-libinput xf86-input-synaptics xinput libdrm \
   xf86driproto
#+end_src sh

xf86-video-intel

Add the search paths to .bashrc (or something):

: guix package --search-paths

start X as root

: slim

and you should be able to run a desktop with

: startx -- ~/.guix-profile/bin/X

I had to add a basic xorg.conf file to point to the drivers.

Note that the X server has to run with root privileges. I am not sure
how to work around this, but I set suid permissions in the store for
the X server.

A working /etc/X11/xorg.conf

#+begin_src sh
Section "ServerLayout"
        Identifier     "X.org Configured"
        Screen      0  "Screen0" 0 0
        InputDevice    "Mouse0" "CorePointer"
        InputDevice    "Keyboard0" "CoreKeyboard"
EndSection


Section "ServerFlags"
   Option   "AllowEmptyInput"     "false"
   Option   "AutoAddDevices"      "false"
   Option   "AutoEnableDevices"   "false"
EndSection

Section "Files"
    ModulePath   "/home/pjotr/.guix-profile/lib/xorg/modules"
    ModulePath   "/home/pjotr/.guix-profile/lib/xorg/modules/drivers"
    ModulePath   "/home/pjotr/.guix-profile/lib/xorg/modules/input"
    ModulePath   "/home/pjotr/.guix-profile/lib/xorg/modules/extensions"
    # XkbDir       "/etc/X11/xkb"
EndSection

Section "Module"
        Load  "glx"
EndSection

Section "InputDevice"
        Identifier  "Keyboard0"
        Driver      "kbd"
EndSection

Section "InputDevice"
        Identifier  "Mouse0"
        Driver      "mouse"
        Option      "Protocol" "auto"
        Option      "Device" "/dev/input/mice"
        Option      "ZAxisMapping" "4 5 6 7"
EndSection

Section "Monitor"
        Identifier   "Monitor0"
        VendorName   "Monitor Vendor"
        ModelName    "Monitor Model"
EndSection

Section "Device"
        Identifier  "Card0"
        Driver      "modesetting"
        BusID       "PCI:0:2:0"
EndSection

Section "Screen"
        Identifier "Screen0"
        Device     "Card0"
        Monitor    "Monitor0"
        SubSection "Display"
                Viewport   0 0
                Depth     24
        EndSubSection
EndSection
#+end_src sh

Now, on my bare X11 system running i3wm, only the following services
are running (outside kernel stuff):

#+begin_src sh
ps xau|grep bin
root       334  0.0  0.0  41104  3496 ?        Ss   07:15   0:00 udevd --daemon
root      1073  0.0  0.0  25400  7708 ?        Ss   07:16   0:00 dhclient -v -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
root      1191  0.0  0.0 258672  3000 ?        Ssl  07:16   0:00 /usr/sbin/rsyslogd
root      1230  0.0  0.0  25904  2124 ?        Ss   07:16   0:00 /usr/sbin/cron
root      1251  0.0  0.0  19276  2056 ?        Ss   07:16   0:00 /usr/sbin/irqbalance --pid=/var/run/irqbalance.pid
root      1275  0.0  0.0  30644  2452 ?        Ss   07:16   0:00 /root/.guix-profile/sbin/sshd -f /etc/ssh/sshd_config
root      1299  0.0  0.0  63528  3076 tty1     Ss   07:16   0:00 /bin/login --
root      1300  0.0  0.0  12844  1824 tty2     Ss+  07:16   0:00 /sbin/getty 38400 tty2
root      1301  0.0  0.0  12844  1948 tty3     Ss+  07:16   0:00 /sbin/getty 38400 tty3
root      1302  0.0  0.0  12844  1960 tty4     Ss+  07:16   0:00 /sbin/getty 38400 tty4
root      1303  0.0  0.0  12844  1928 tty5     Ss+  07:16   0:00 /sbin/getty 38400 tty5
root      1304  0.0  0.0  12844  1912 tty6     Ss+  07:16   0:00 /sbin/getty 38400 tty6
pjotr     1339  0.0  0.0  18028  1956 tty1     S+   07:16   0:00 xinit /home/pjotr/.xinitrc -- /home/pjotr/.guix-profile/bin/X :0 -auth /home/pjotr/.serverauth.1321
root      1340  0.1  0.4 155516 32900 tty7     Ss+  07:16   0:00 /home/pjotr/.guix-profile/bin/X :0 -auth /home/pjotr/.serverauth.1321
pjotr     1344  0.0  0.1 115936  9372 tty1     S    07:16   0:00 i3
pjotr     1348  0.0  0.1  90168  8080 ?        S    07:16   0:00 i3bar --bar_id=bar-0 --socket=/tmp/i3-pjotr.xWV6Ja/ipc-socket.1344
pjotr     1349  0.0  0.0  57320  3924 ?        S    07:16   0:00 i3status
#+end_src

Note the lack of dbus, for example. Still nice and minimalistic. I think
this is sweet.

** Fonts

This description appeals to me:

: guix package --show=font-terminus
: location: gnu/packages/fonts.scm:381:2
: homepage: http://terminus-font.sourceforge.net/
: license: SIL OFL 1.1
: synopsis: Simple bitmap programming font
: description: Terminus Font is a clean, fixed width bitmap font, designed for
: + long (8 and more hours per day) work with computers.

Install

: guix package -i font-terminus

The fonts are stored in $HOME/.guix-profile/share/fonts/terminus. Now you
can do

: xterm -fa 'terminus' -fs 20

or
: xterm -fa 'terminus' -fn 9x15

to get a large font. Another interesting set is font-liberation:

: synopsis: Fonts compatible with Arial, Times New Roman, and Courier New
: description: The Liberation font family aims at metric compatibility with
: + Arial, Times New Roman, and Courier New.
: + - Sans (a substitute for Arial, Albany, Helvetica, Nimbus Sans L, and
: + Bitstream Vera Sans);
: + - Serif (a substitute for Times New Roman, Thorndale, Nimbus Roman, and
: + Bitstream Vera Serif);
: + - Mono (a substitute for Courier New, Cumberland, Courier, Nimbus Mono L, and
: + Bitstream Vera Sans Mono).

Usage

: xterm -fa 'Mono' -fs 20

** Keyboard layout

: guix package -i xset setxkbmap

I had to copy my keyboard layout into the store (not recommended, I
need to add a proper package!)

: root@monza:/gnu/store/cqwv78pirkfka92flin1hs34sb5i8v1k-xkeyboard-config-2.17# cp /home/pjotr/workman share/X11/xkb/symbols/
