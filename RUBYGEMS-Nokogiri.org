#+TITLE: Supporting (native) gems in GNU Guix

* Table of Contents                                                     :TOC:
 - [[#introduction][Introduction]]
 - [[#current-state][Current state]]
     - [[#gnu-guix-installed-gem][GNU Guix installed gem]]
     - [[#gem-in-home][Gem in $HOME]]
     - [[#bundler][Bundler]]
 - [[#nokogiri][Nokogiri]]
     - [[#introduction-][Introduction ]]
     - [[#set-up-the-environment][Set up the environment]]
     - [[#gem-install-nokogiri]['gem install nokogiri']]
     - [[#bundle-install]['bundle install']]
     - [[#in-progress-creating-the-tgz-derived-package][IN PROGRESS Creating the tgz-derived package]]
     - [[#todo-creating-the-gem-derived-package][TODO Creating the gem-derived package]]
     - [[#todo-gnu-guix-import-gem][TODO GNU Guix: import gem]]
 - [[#notes][Notes]]
     - [[#why-is-bundler-installing-in-gems][Why is bundler installing in .gems?]]
     - [[#todo-add-gnu-guix-to-the-nokogiri-installation-page][TODO Add GNU Guix to the Nokogiri installation page]]

* Introduction

This document explains how to go from creating a software package to
creating a non-native software packaging system in GNU Guix. Examples
of such systems are Python pip, emacs ELPA packages and (here) Ruby
gems.

Ruby developers have multiple needs when running a system when it
comes to Ruby versions and modules (called gems). GNU Guix has great
support for versioning and control of the dependency graph. Here we
discuss gem support in GNU Guix (this is a work in progress).

Basically we are aware of the following use cases after installing
a version of Ruby (say 2.1.6):

1. A user/sysadmin wants to install a gem in the GNU Guix store 
2. A user wants to install a gem using rubygems outside GNU Guix and
   local to $HOME
3. A developer wants to use bundler which installs gems in the source
   tree for development and testing

In all cases, when Ruby code needs to include a file, resolving the
location of the gem should start in 3, next 2, then 1. As an example
of supporting a complex gem we use the example of Nokogiri which has
over 1,000 installation related questions on Stack Overflow.

* Current state
** GNU Guix installed gem

GNU Guix now build gems from a tar-ball using a Ruby build
environment. Installing ruby-hoe

: guix package -i ruby-hoe

creates a symlink to the executable sow in

: /home/pjotrp/.guix-profile/bin/sow -> /gnu/store/ccx2ri5l8y6qbrzkw4p0gq8l647kxn0g-ruby-hoe-3.13.1/bin/sow

and the libraries are available through the symlink in

: /home/pjotrp/.guix-profile/lib/ruby/gems/2.2.0/gems/hoe-3.13.1/ -> /gnu/store/ccx2ri5l8y6qbrzkw4p0gq8l647kxn0g-ruby-hoe-3.13.1/lib/ruby/gems/2.2.0/gems/hoe-3.13.1

Running sow means you'll need to add the GNU Guix gem locations to the
GEM_PATH, e.g.,

: env GEM_PATH=~/.guix-profile/lib/ruby/gems/2.2.0 sow

*** TODO Make the GNU Guix gem path automatically available

At this point the GEM_PATH is not set properly. Guix prints the PATH
after installing a package so you can add it to you environment. For end-users 
we may want to automate that.

To see the actual paths and libraries that a Ruby uses, check

: guix environment ruby-2.1 --search-paths

To see the environment paths, check

: guix package --search-paths


Currently you have to set the GEM_PATH by hand. I use a [[https://github.com/pjotrp/guix-notes/blob/master/scripts/ruby-guix-env][script]] for this.

*** TODO Provide a build system that uses simple gem descriptions

We could extract Gem information from Rubygems - something Nix was
capable of doing - and create expressions from those (even on the
fly). GNU Guix has an 'import' command just for this.

** Gem in $HOME

The gem tool comes with the GNU Guix Ruby installation. This means you can run
gem after tweaking the local PATHs. An example can be found [[https://github.com/pjotrp/guix-notes/blob/master/scripts/ruby-guix-env][here]]. Run it as

: . ruby-guix-env

Note: it also sets the path for GNU Guix global gems.

*** Supporting native gems

Native gems include some C or C++ code.

Currently the GNU Guix gem tool does build native gems. See below the 
infamous Nokogiri example.

** Bundler

Bundler works in GNU Guix, both installed though Guix and through
gems. See the Nokogiri example below.

* Nokogiri

** Introduction 

Nokogiri is a great test case because the gem contains both Ruby and C
files (that need to be compiled into shared library nokogiri.so) and
it depends on external C libraries which are not always on a system
(libxml2 and libxslt, for example).

** Set up the environment

First using [[https://github.com/pjotrp/guix-notes/blob/master/scripts/ruby-guix-env][the script]] I set up the Guix environment so it looks like

#+begin_src sh   :lang bash
set|grep guix
ACLOCAL_PATH=/home/pjotrp/.guix-profile/share/aclocal
BASH=/home/pjotrp/.guix-profile/bin/bash
CPATH=/home/pjotrp/.guix-profile/include
GEM_PATH=/home/pjotrp/.gem/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6/2.1.0:/home/pjotrp/.guix-profile/lib/ruby/gems/2.1.0/
GUILE_LOAD_COMPILED_PATH=/home/pjotrp/.guix-profile/share/guile/site/2.0
GUILE_LOAD_PATH=/home/pjotrp/.guix-profile/share/guile/site/2.0
LIBRARY_PATH=/home/pjotrp/.guix-profile/lib
LOCPATH=/home/pjotrp/.guix-profile/lib/locale
PATH=/home/pjotrp/.gem/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6/2.1.0/bin:/home/pjotrp/.guix-profile/bin:/home/pjotrp/.guix-profile/sbin:/usr/bin:/bin
PKG_CONFIG_PATH=/home/pjotrp/.guix-profile/lib/pkgconfig
#+end_src sh   :lang bash

Note the PATH still contains /usr/bin for convenience.

** 'gem install nokogiri'

Trying a naive 

: gem install nokogiri 

results in 'ERROR: Failed to build gem native extension' due to a failing libxml2
build. Nokogiri packages its own version of libxml2. One way to solve this error
is by fixing the compile problem (the logs say it is libtool related), the other way
is to install libxml2 in Guix and tell nokogiri where to find it.

: guix package -i libxml2

Guix symlinks both static and shared libraries in ~/.guix-profile/lib/
so we tell nokogiri where to find them

: gem install nokogiri -- --use-system-libraries --with-xml2-include=$HOME/.guix-profile/include/libxml2 --with-xml2-lib=$HOME/.guix-profile/lib

First Nokogiri complains 'libxml2 version 2.9.2 or later is highly recommended, but proceeding anyway' - we can fix that later.
Next error is missing libxslt, but now we know what to do

: guix package -i libxslt

and

: gem install nokogiri -- --use-system-libraries --with-xml2-include=$HOME/.guix-profile/include/libxml2 --with-xslt-include=$HOME/.guix-profile/include/libxslt --with-xml2-lib=$HOME/.guix-profile/lib --with-xslt-lib=$HOME/.guix-profile/lib

and now the build succeeded

: nokogiri -v
: # Nokogiri (1.6.6.2)

That was rather easy for a notoriously difficult gem! And it looks
like we can formalize this in a Guix package. Note that I cheated a
little. Since /usr/bin is still in the path I am (probably) still
using some of the build tools of the underlying distribution. I could
aim to fix that, but it will come out when we add a proper guix
package anyway.

One interesting check is to see what the nokogiri.so shared library
that we built links against, e.g.

: ldd $HOME/.gem/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6/2.1.0/extensions/x86_64-linux/2.1.0-static/nokogiri-1.6.6.2/nokogiri/nokogiri.so

and validate all the paths are pointing at the GNU Guix store. You
don't want to mix in libraries that are non-guix. Note that the
Nokigiri documentation also suggests gem path options for

: --with-iconv-dir=/path/to/dir --with-zlib-dir=/path/to/dir 

as well as 

: --with-exslt-dir=/path/to/dir --with-exslt-config=/path/to/exslt-config.

But none of these were needed here.

** 'bundle install'

Running bundler naively 

:  bundle install

results in the same library issues with 'Gem::Ext::BuildError: ERROR:
Failed to build gem native extension'. Bundler also needs to be told
where to find the libraries.

The first try was to configure bundler by adding to .bundle/config

: BUNDLE_BUILD__NOKOGIRI: "--use-system-libraries --with-xml2-include=$HOME/.guix-profile/include/libxml2 --with-xslt-include=$HOME/.guix-profile/include/libxslt --with-xml2-lib=$HOME/.guix-profile/lib --with-xslt-lib=$HOME/.guix-profile/lib"

Unfortunately, this does not work as it does not prevent bundler for
starting to build the libxml2. This should not happen with the
--use-system-libraries option. To check the bundler setting see

: bundle config build.nokogiri
:
: Set for your local app (app/.bundle/config): "--use-system-libraries --with-xml2-include=$HOME/.guix-profile/include/libxml2 --with-xslt-include=$HOME/.guix-profile/include/libxslt --with-xml2-lib=$HOME/.guix-profile/lib --with-xslt-lib=$HOME/.guix-profile/lib"

But somehow these do not get honoured by extconf.rb. After reading the
source and some trying inside the build dir I found the environment variable

: ~/.gems/bundler/ruby/2.1.0/gems/nokogiri-1.6.1/ext/nokogiri$ env NOKOGIRI_USE_SYSTEM_LIBRARIES=1 ruby extconf.rb  --with-xml2-include=/home/pjotrp/.guix-profile/include/libxml2 --with-xslt-include=/home/pjotrp/.guix-profile/include/libxslt --with-xml2-lib=/home/pjotrp/.guix-profile/lib --with-xslt-lib=/home/pjotrp/.guix-profile/lib

resulted in 

: /usr/include/features.h:323:26: fatal error: bits/predefs.h: No such file or directory

predefs is part of the GNU C library (libc6), so it is kinda strange it does
not get picked up (well, Guix even isolates away the native system -
go the Guix gcc compiler does not see /usr/include). Adding
--with-opt-include=/usr/include/x86_64-linux-gnu does find it.  Added
that to bundler's config

: BUNDLE_PATH: /home/pjotrp/.gems/bundler/
: BUNDLE_DISABLE_SHARED_GEMS: '1'
: BUNDLE_BUILD__NOKOGIRI: " --with-xml2-include=/home/pjotrp/.guix-profile/include/libxml2 --with-xslt-include=/home/pjotrp/.guix-profile/include/libxslt --with-xml2-lib=/home/pjotrp/.guix-profile/lib --with-xslt-lib=/home/pjotrp/.guix-profile/lib --with-opt-include=/usr/include/x86_64-linux-gnu"

and ran

: env NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle

and the thing builds. Better even, also Cucumber builds and all the
test pass for bio-vcf (the tool I want to ultimately package).

Note we should have used predefs.h from the store
glibc-2.21/include/stdc-predef.h instead. It looks like Nokogiri is using
an older include. [[http://pastebin.com/HfJcVB4Q][This]] suggests what needs to be done: 

: error: #error "Never use <bits/predefs.h> directly; include <stdc-predef.h> instead."

** IN PROGRESS Creating the tgz-derived package

*** Fetch and unpack the tar ball

Now we now how gem/bundler builds Nokogiri we have a chance at building the 
package from source and bundling it into GNU Guix. The tar ball can be found
on [[https://github.com/sparklemotion/nokogiri/releases]].

Unpack the tar ball and extconf.rb builds with

: cd ext\nokogiri
: env LD_LIBRARY_PATH=$HOME/.guix-profile/lib LIBRARY_PATH=$HOME/.guix-profile/lib \
:   NOKOGIRI_USE_SYSTEM_LIBRARIES=1 ruby extconf.rb \
:   --with-xml2-include=$HOME/.guix-profile/include/libxml2 \
:   --with-xslt-include=$HOME/.guix-profile/include/libxslt \
:   --with-xml2-lib=$HOME/.guix-profile/lib --with-xslt-lib=$HOME/.guix-profile/lib \
:   --with-opt-include=/usr/include/x86_64-linux-gnu \
:   --with-opt-include=$HOME/.guix-profile/include

and make

: env LIBRARY_PATH=$HOME/.guix-profile/lib  make

check the linked paths

#+begin_src sh   :lang bash
  ldd nokogiri.so
        linux-vdso.so.1 (0x00007ffc9f3e1000)
        libexslt.so.0 => /home/pjotrp/.guix-profile/lib/libexslt.so.0 (0x00007fb6c45aa000)
        libxslt.so.1 => /home/pjotrp/.guix-profile/lib/libxslt.so.1 (0x00007fb6c436b000)
        libxml2.so.2 => /home/pjotrp/.guix-profile/lib/libxml2.so.2 (0x00007fb6c4006000)
        libpthread.so.0 => /home/pjotrp/.guix-profile/lib/libpthread.so.0 (0x00007fb6c3de9000)
        libdl.so.2 => /home/pjotrp/.guix-profile/lib/libdl.so.2 (0x00007fb6c3be4000)
        libcrypt.so.1 => /home/pjotrp/.guix-profile/lib/libcrypt.so.1 (0x00007fb6c39ad000)
        libm.so.6 => /home/pjotrp/.guix-profile/lib/libm.so.6 (0x00007fb6c36ab000)
        libc.so.6 => /home/pjotrp/.guix-profile/lib/libc.so.6 (0x00007fb6c330a000)
        libgcc_s.so.1 => /gnu/store/76afr0pfbnimz7rdad35y5yd753myjhk-gcc-4.9.2-lib/lib/libgcc_s.so.1 (0x00007fb6c30f4000)
        liblzma.so.5 => /gnu/store/h86jd7lyd6lny3yz30d44gi4b0mz73in-xz-5.0.4/lib/liblzma.so.5 (0x00007fb6c2ed1000)
        libz.so.1 => /gnu/store/yx7c449ds3psyrn40h4nfvsb7xqqzziy-zlib-1.2.7/lib/libz.so.1 (0x00007fb6c2cb8000)
        libgcrypt.so.20 => /gnu/store/r16v30hlw2d6n232rm37p53qy8rpr7f2-libgcrypt-1.6.3/lib/libgcrypt.so.20 (0x00007fb6c29db000)
        libgpg-error.so.0 => /gnu/store/63lp72xz64axrbrlvpyln449v42h0zbh-libgpg-error-1.18/lib/libgpg-error.so.0 (0x00007fb6c27ca000)
        /gnu/store/wiqbxcvzj3r35hd55yxzz919b1dv1hnv-glibc-2.21/lib/ld-linux-x86-64.so.2 (0x00007fb6c49de000)
#+end_src sh   :lang bash

as it should be - though with the GNU Guix package the .guix-profile's will point to
proper store locations.

*** Create the gem from source

nokogiri.so is the C-part of the gem. The Ruby part sits in ./bin and
./lib in the tarball. These can simply be copied into the
GEM_HOME. But reading the current implementation of the GNU Guix
ruby-build-system, it creates a gem first using a gemspec

: rake gem:spec

create the gem

: gem build nokogiri.gemspec 

install using our earlier trick

: env C_INCLUDE_PATH=$HOME/.guix-profile/include gem install --local nokogiri-1.6.6.2.20150629081149.gem -- --use-system-libraries --with-xml2-include=$HOME/.guix-profile/include/libxml2 --with-xslt-include=$HOME/.guix-profile/include/libxslt --with-xml2-lib=$HOME/.guix-profile/lib --with-xslt-lib=$HOME/.guix-profile/lib --with-opt-include=$HOME/.guix-profile/include

which (now) fails with

: 38:26: fatal error: linux/limits.h: No such file or directory
:  #include <linux/limits.h>

Actually, this is not so bad. The environment gets picked up in a GNU Guix package, so
let's move on. The install path (mostly) works.

*** TODO Write the GNU Guix package

** TODO Creating the gem-derived package
** TODO GNU Guix: import gem
* Notes
** Why is bundler installing in .gems?

It says so in the ./bundle/config file.
** TODO Add GNU Guix to the Nokogiri installation page

Nokogiri lists many solutions [[http://www.nokogiri.org/tutorials/installing_nokogiri.html][here]]. We should add ours.
