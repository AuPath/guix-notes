#+TITLE: Ruby on GNU Guix

* Table of Contents                                                     :TOC:
 - [[#introduction][Introduction]]
 - [[#todo-gnu-guix-installation][TODO GNU Guix installation]]
 - [[#ruby][Ruby]]
     - [[#check-shared-libraries][Check shared libraries]]
 - [[#todo-adding-gems-in-user-land][TODO Adding Gems in user land]]
     - [[#user-land-gems-with-gem_home-and-gem_path][User land gems with GEM_HOME and GEM_PATH]]
     - [[#dynamically-linked-libraries][Dynamically Linked Libraries]]
     - [[#gnu-guix-ruby-with-bundler][GNU Guix ruby with bundler]]
 - [[#todo-adding-system-shared-gems][TODO Adding system shared gems]]
 - [[#todo-generating-gnu-guix-gem-packages][TODO Generating GNU Guix Gem packages]]

* Introduction

The GNU software packaging project is packaging done right. Ruby
deployment with rubygems used to be pretty good, years ago, but over
time it has turned into a nightmare of dependencies. Tools like RVM
and rbenv try to bring some level of control for running multiple
versions of Ruby, but over the last years they are showing their
limitations clearly. Every time I need to work with RVM I start
throwing things at my computer. So when should you look at GNU Guix?
You should look at Guix when you 

1. are serious about software deployment
2. need to handle multiple versions of Ruby
3. want clear isolation of dependencies
4. want clean separation of gems
5. want a reproducible environment

GNU Guix allows you to define a software package once with all its
dependencies. Every time you install the package it gets reproduced
*exactly* with its exact dependency graph, all the way down to
glibc. Whether you are a sysadmin who needs to deploy an exact Rails
stack or you are a developer and need to support user environment, GNU
Guix is the solution you require. Use cases are

1. test gems using multiple versions of Ruby 
2. install concurrent rubies with or without linked openssl support
3. run minimal ruby to be exposed to the web
4. update ruby in production and roll-back after a problem
5. run multiple versions of the same gem against one ruby
6. run multiple versions of openssl dependencies

Use your imagination. The point is that you control the *full* dependency
graph. Always. You can even give users rights to install and share software because
the underlying system is 'immutable'. Existing graphs can not be overwritten
by others.

GNU Guix is a next generation software package installer with a range
of features, including sane dependency handling, transactional and
reproducible installs which can be rolled back. In short, GNU Guix has
resolved the fundamental problems of software deployment and
management. GNU Guix also should play well with Docker and VMs.

GNU Guix is getting mature with almost a thousand software
packages. In this document I explain what the philosophy is of Ruby
(gem) software management and how we put it together. Feel free to ask
questions and contribute ideas. There are multiple possible tactics
for sane dependency handling that GNU Guix could support.

* TODO GNU Guix installation

The Achilles heel of introducing GNU Guix at this point (2015)
is that it is not standard in Linux distributions. That support will
come because GNU Guix is the official packaging system of the GNU
project and is orthogonal to existing software packaging systems (everything
is installed in /gnu). It will happen.

Currently there are two ways of installing GNU Guix. See the [[https://github.com/pjotrp/guix-notes/blob/master/INSTALL.org][INSTALL]]
document in this repository. Soon we'll add a binary installer, which
should make things easier. Note that if you have Guix installed and
running from /guix/store you can just transfer the setup to another
machine! The only dependency is the Linux kernel. To add packages see
[[https://github.com/pjotrp/guix-notes/blob/master/HACKING.org][HACKING]].

* Ruby

The basic idea of GNU Guix is simple. A HASH value (SHA256) is calculated 
over the inputs to a build. This includes the source code of Ruby, and the
switches used over configure and make. The software is installed under the
HASH, for example I have Ruby 2.1.2 and 2.1.3 on my system sitting under

#+begin_src sh
  /gnu/store/wy8hwm8c01r2lsgkci67amg66pk9ml7a-ruby-2.1.3:
  bin  include  lib  share

  /gnu/store/yb9z2y7ndzra9r3x7l3020zjpds43yyc-ruby-2.1.2:
  bin  include  lib  share
#+end_src sh

and, for example, another ruby 1.8.7 under

#+begin_src sh
  /gnu/store/2sd245py3i04y4yapvnp8cdpsykijllh-ruby-1.8.7:
  bin  lib  share
#+end_src sh

They are cleanly separated. Now if I were to change the configure for
2.1.3, for example a build without openssl, it would simply become
another HASH and therefore directory.

It gets even better, the HASH value is also calculated over the
dependencies. So, if you are running two different glibc's on your
system (each under its own HASH directory), or openssl's, the ruby
interpreter gets build against one of each and calculates a unique
HASH. So you can theoretically have four concurrent Ruby 2.1.3
installations, compiled against any combination of two glibc's and two
openssl's. The point, again, is that you have full control over the dependency
graph!

To make a Ruby visible to a user, GNU Guix uses symlinks. Installing a
particular Ruby will symlink a so-called profile in
~/.guix-profile/bin. To run Ruby, simply run it as

#+begin_src sh
  ~/.guix-profile/bin/ruby -v
  ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux]
#+end_src

The libraries that come with Ruby are also symlinked via
~/.guix-profile/lib/ruby/2.1.0/.  The numbering does not matter too
much since it points to an immutable (read-only) directory in

#+begin_src sh
  ~/.guix-profile/lib -> /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib
#+end_src

When a profile is built, the symlinks are always placed as close to
the root as possible.  In the case above, the ruby package is the only
thing in your profile that has a top-level 'lib' directory.  If later
another package gets installed that contains 'lib', the newly-built
profile will create 'lib' as a directory and move the symlinks further
down.

This means that you can access Ruby libraries shipped with a
particular Ruby version, but that you can not write new files into
that directory! The Ruby installation is carved in stone.

** Check shared libraries

To check the version of openssl you can do

: ~/.guix-profile/bin/ruby -ropenssl -e "puts OpenSSL::VERSION"

To list the shared libraries:

#+begin_src sh
ldd ~/.guix-profile/bin/ruby 
        linux-vdso.so.1 (0x00007ffee8533000)
        libpthread.so.0 => /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/libpthread.so.0 (0x00007efe20b58000)
        libdl.so.2 => /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/libdl.so.2 (0x00007efe20954000)
        libcrypt.so.1 => /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/libcrypt.so.1 (0x00007efe2071d000)
        libm.so.6 => /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/libm.so.6 (0x00007efe2041b000)
        libgcc_s.so.1 => /gnu/store/rsw0dkmv1x2krv9pl1ciai1h235r9nb7-gcc-4.8.4-lib/lib/libgcc_s.so.1 (0x00007efe20205000)
        libc.so.6 => /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/libc.so.6 (0x00007efe1fe65000)
        /gnu/store/hy2hi0zj5hrqkmkhpdxf04c9bcnlnsf9-glibc-2.21/lib/ld-linux-x86-64.so.2 (0x00007efe20d75000)
#+end_src

* TODO Adding Gems in user land

Ruby comes with gem support out of the box. The gem tool also is symlinked
in ~/.guix-profile/bin. When we run `gem env' it says

#+begin_src sh
  export PATH=~/.guix-profile/bin/:$PATH
  gem env

  RubyGems Environment:
  - RUBYGEMS VERSION: 2.2.2
  - RUBY VERSION: 2.1.3 (2014-09-19 patchlevel 242) [x86_64-linux]
  - INSTALLATION DIRECTORY: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib/ruby/gems/2.1.0
  - RUBY EXECUTABLE: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/bin/ruby
  - EXECUTABLE DIRECTORY: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/bin
  - SPEC CACHE DIRECTORY: /home/user/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/specs
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/lib/ruby/gems/2.1.0
     - /home/user/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/2.1.0
#+end_src

The general idea is that we allow users to install their own gems, but
cleanly separated against the HASH dir that comes with the Ruby
installation. This way there is clear isolation between different
installed versions of Ruby. Unlike RVM and rbenv, there is NO
(accidental) sharing between different Ruby installations!

To achieve clean separation we can patch Ruby and gem to make use of the new
GEM_PATHs, or we can create a wrapper script which presets the PATH. At this
point I favour the patching because Ruby gem has these paths built-in.

** User land gems with GEM_HOME and GEM_PATH

When you do a grep on the files in the Ruby installation dir, all references
to GEM_HOME and GEM_PATH occur in files under lib/ruby/2.1.0/rubygems/.

When you override these with 

#+begin_src sh
env GEM_HOME=gem_home GEM_PATH=gem_path GEM_SPEC_CACHE=gem_spec_cache gem env
RubyGems Environment:
  - RUBYGEMS VERSION: 2.2.2
  - RUBY VERSION: 2.1.3 (2014-09-19 patchlevel 242) [x86_64-linux]
  - INSTALLATION DIRECTORY: gem_home
  - RUBY EXECUTABLE: /gnu/store/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/bin/ruby
  - EXECUTABLE DIRECTORY: gem_home/bin
  - SPEC CACHE DIRECTORY: gem_spec_cache
  - RUBYGEMS PLATFORMS:
    - ruby
    - x86_64-linux
  - GEM PATHS:
     - gem_home
     - gem_path
#+end_src

you can see Rubygems cleanly honours these environment variables
(which is what, for example, rbenv utilises). Clean separation can
thus be enforced from the command line with

#+begin_src sh
  export GEM_PATH=/home/wrk/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/2.1.0
  export GEM_HOME=$GEM_PATH
  export GEM_SPEC_CACHE=/home/wrk/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/specs
  mkdir -p $GEM_PATH
  mkdir -p $GEM_SPEC_CACHE
  gem env
#+end_src

Now local gem installs should work, e.g.

#+begin_src sh
  gem install -V bundler
  gem install -V bio-logger
#+end_src

and 

#+begin_src sh
  gem list -d 
#+end_src

will tell you where the gems are installed. To use bundler you can call

#+begin_src sh
  ~/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/2.1.0/bin/bundler
#+end_src

The paths may look a bit long, but that guarantees separation! The PATH should
be set to

#+begin_src sh
  export PATH=$HOME/.guix-profile/bin:$HOME/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3/2.1.0/bin
#+end_src

and run

#+begin_src sh
  bundle
  bundle exec rake
#+end_src

When there is a problem with your gems, simply clean up
$HOME/.gem/ziy7a6zib846426kprc7fgimggh8bz97-ruby-2.1.3 and start from
scratch with a clean Ruby installation. Or, more rigorously, start writing
system shared gems.

I wrote a bash script which does this can be found as
[[https://github.com/pjotrp/guix-notes/blob/master/scripts/ruby-guix-env][./scripts/ruby-guix-env]] and can be run as

#+begin_src sh
  source ./scripts/ruby-guix-env
#+end_src

** Dynamically Linked Libraries

Gems build in GEM_HOME may look for linked libraries

: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.guix-profile/lib

** GNU Guix ruby with bundler

Recently bundler support was added! After installing bundler you may
want to set the GEM_PATH to include the guix-profile gem location,
e.g.,

: export GEM_PATH=/home/wrk/.gem/x4z4vi0aynd5krn4fz3l7ix9187z0g8y-ruby-2.2.2/2.1.0:$HOME/.guix-profile/lib/ruby/gems/2.2.0

Check with `gem env' and try to `run bundle'.

* TODO Adding system shared gems

System shared gems are GNU Guix packages (unless you start explicitly overriding above 
GEM_PATHs). The advantage of using GNU Guix is that the dependency graph is explicit
and people can easily share installations. A gem gets installed with its version under
its own HASH dir, e.g.

#+begin_src sh
  /gnu/store/HASH-rspec-1.0.0
#+end_src

This means (again) you can support multiple versions of gems. Under GNU Guix gems become
first-rate citizens in a software stack.

* TODO Generating GNU Guix Gem packages

The Gem specification is pretty straightforward. The great problem with rubygems is
that they are not designed for clear isolation of installations. With GNU Guix it
should be possible to generate installation packages from Gem definitions.

