-*- mode: org; coding: utf-8; -*-

#+TITLE: GNU Guix containers

* Introduction

GNU Guix is an excellent implementation of Linux container managers
and compares favourably to other container systems, such as Docker.
In addition to the advantages that Guix offers as a deployment system,
Guix containers share the same software repository as the host, i.e.,
Guix containers are extremely light-weight! This is possible because
Guix software is immutable and versioned. And because it is Guix,
everything installation is both build and binary reproducible.

See also the official GNU Guix [[https://www.gnu.org/software/guix/manual/html_node/Invoking-guix-environment.html#][documentation]].

* Running a container

Containers can be run as regular users in X, provided the Kernel
gives permission.

** Usage

Give the package name(s), here emacs and coreutils (for ls etc.), you want to have in the container:

#+begin_src sh
    guix environment --container --network --ad-hoc emacs coreutils
#+end_src

You can run a command once:

#+begin_src sh
guix environment --ad-hoc --container coreutils -- df
#+end_src

prints the loaded home dir and the store profile:

#+begin_src sh
Filesystem                  1K-blocks      Used Available Use% Mounted on
none                          3956820         0   3956820   0% /dev
udev                            10240         0     10240   0% /dev/tty
tmpfs                           65536         0     65536   0% /dev/shm
/dev/sda1                    38057472  19874684  16226540  56% /export2/izip
/dev/mapper/volume_group-vm 165008748 109556608  47047148  70% /gnu/store/ikkks8c56g56znb5jgl737wkq7w9847c-profile
#+end_src

Note that 'guix environment --ad-hoc --container' will mount your
current working directory (here /export2/izip). If you start from an
empty $HOME/tmp directory - that will be mounted. Any files you put
here will be persistent between container runs.

Note you can point HOME to any path on startup from the shell

#+begin_src sh
guix environment --ad-hoc coreutils --container bash -- env HOME=$HOME/tmp/newhome/ bash
#+end_src

which allows you to run specific startup scripts and keep
configurations between runs.
** Browser

Run icecat, a browser, in a container with

#+begin_src sh
    guix environment --container --network --share=/tmp/.X11-unix
--ad-hoc icecat
    export DISPLAY=":0.0"
    icecat
#+end_src

You only need to install the package once.

** Running Windows tools in Wine

Wine can also be run in a container:

#+begin_src sh
    guix environment --container --network --share=/tmp/.X11-unix
--ad-hoc wine
    export DISPLAY=":0.0"
    wine explorer
#+end_src

which is great. I used to have to use VirtualBox and such to run the
occasional Windows tool. Now it runs in a container with access to
the local file system.

To run the tool in one go and set the HOME dir:

#+begin_src sh
guix environment --network --expose=/mnt/cdrom --share=/tmp/.X11-unix --container --ad-hoc wine vim bash coreutils -- env HOME=`pwd` DISPLAY=":0.0" wine explorer
#+end_src sh

* Docker

Guix has its own containers using native Linux support, but you can
also run Guix in Docker and distribute software that way. One
interesting thing you can do is run guix 'pack' which creates a docker
image of a package with all its dependencies, see this [[https://www.gnu.org/software/guix/news/creating-bundles-with-guix-pack.html][description]].

** Providing a usable Docker container

*** Install the package in the main /gnu/store

For a paper we made a compilation of bioinformatics software and put
it all in one GNU Guix [[https://gitlab.com/genenetwork/guix-bioinformatics/blob/master/gn/packages/book_evolutionary_genomics.scm#L113][package]] named book-evolutionary-genomics.  I
can install it using a local GUIX checkout commit
cc14a90fd3ce34a371175de610f9befcb2dad52b

#+begin_src shell
env GUIX_PACKAGE_PATH=../guix-bioinformatics \
  ./pre-inst-env guix package -p ~/opt/book-evolutionary-genomics \
  --no-grafts -i book-evolutionary-genomics \
  --substitute-urls="http://guix.genenetwork.org https://berlin.guixsd.org https://mirror.hydra.gnu.org"
#+end_src

resulting in a totally reproducible package.

*** Try things in a Guix container

Now we want to isolate them into a container.  To run these tools
inside a Guix container you can do like the earlier

#+begin_src shell
env GUIX_PACKAGE_PATH=../guix-bioinformatics/ \
  ./pre-inst-env guix environment --no-grafts --ad-hoc \
  --substitute-urls="http://guix.genenetwork.org https://berlin.guixsd.org https://mirror.hydra.gnu.org" \
  coreutils book-evolutionary-genomics vim screen \
  --container bash -- bash
#+end_src

starts up a bash shell in a clean container. For the book we have created
some scripts in the profile which can be found with the GUIX_ENVIRONMENT setting:

: cd $GUIX_ENVIRONMENT/share/book-evolutionary-genomics

The bin directory is on the PATH already, but for some scripts you may
want to create /usr/bin pointing to $GUIX_ENVIRONMENT/bin

: mkdir /usr
: ln -s $GUIX_ENVIRONMENT/bin /usr/bin

Note that /gnu/store is immutable and can therefore be shared with the
main system. This makes GNU Guix containers really small and fast.

*** Docker

You can create a Docker image without actually installing Docker(!)

#+begin_src shell
env GUIX_PACKAGE_PATH=../guix-bioinformatics/ \
  ./pre-inst-env guix pack -f docker --no-grafts \
  -S /usr/bin=/bin -S /etc/profile=/etc/profile \
  -S /book-evolutionary-genomics=/share/book-evolutionary-genomics \
  coreutils book-evolutionary-genomics bash vim
#+end_src

note we now have the -S switch which can make the /usr/bin symlink
into the profile.

This produced a file which we can load into Docker

: docker load --input /gnu/store/0p1ianjqqzbk1rr9rycaqcjdr2s13mcj-docker-pack.tar.gz
: docker images
:   REPOSITORY          TAG                                IMAGE ID            CREATED             SIZE
:   profile             425c1ignnjixxzwdwdr5anywnq9mg50m   121f9cca6c55        47 years ago        1.43 GB


Now you should see the image id and you can run

: docker run 121f9cca6c55 /usr/bin/ruby --version

Find the profile

: docker run 121f9cca6c55 /usr/bin/ls /usr/bin -l

Read the profile settings

: docker run 121f9cca6c55 cat /gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile/etc/profile

But there is an easier way because we created the symlink earlier

: docker run 121f9cca6c55 cat /etc/profile

Run bioruby

: docker run 121f9cca6c55 bash -c "env GEM_PATH=/gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile//lib/ruby/gems/2.4.0 /gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile/share/book-evolutionary-genomics/src/bioruby/DNAtranslate.rb

with input file

: time docker run 121f9cca6c55 bash -c "env GEM_PATH=/gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile//lib/ruby/gems/2.4.0 /gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile/share/book-evolutionary-genomics/src/bioruby/DNAtranslate.rb /gnu/store/425c1ignnjixxzwdwdr5anywnq9mg50m-profile/share/book-evolutionary-genomics/test/data/test-dna.fa"

or the easy way since we created the links

: time docker run 121f9cca6c55 \
:   bash -c "source /etc/profile ; cd /book-evolutionary-genomics ; src/bioruby/DNAtranslate.rb test/data/test-dna.fa"
